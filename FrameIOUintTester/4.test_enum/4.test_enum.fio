//项目:4.test_enum
project test_enum {
	//受控对象
	system testenum {
		uint datetype;
		uint name1;
		uint name2;
		uint age1;
		uint age2;

		channel CH_COM3 : com {
			portname = "COM3";
			baudrate = 9600;
			parity = 0;
			databits = 8;
			stopbits = 1;
		}
		channel CH_COM4 : com {
			portname = "COM4";
			baudrate = 9600;
			parity = 0;
			databits = 8;
			stopbits = 1;
		}

		action A_Send_Type1 : send Frame_Send_Type1 on CH_COM3 {
			DATATYPE : datetype;
			NAME1 : name1;
			NAME2 : name2;
		}
		action A_Send_Type2 : send Frame_Send_Type2 on CH_COM3 {
			DATATYPE : datetype;
			AGE1 : age1;
			AGE2 : age2;
		}
		action A_Recv : recv Frame_Recv on CH_COM4 {
			@switch((Enum_Type)data.DATATYPE) {
			@case Enum_Type.enum_type1:
			DATA.enum_type1.NAME1 : name1;
			DATA.enum_type1.NAME2 : name2;
			@break;
			@case Enum_Type.enum_type2:
			DATA.enum_type2.AGE1 : age1;
			DATA.enum_type2.AGE2 : age2;
			@break;
			@}
			DATATYPE : datetype;
		}
	}

	//数据帧
	frame Frame_Send_Type1 {
		integer DATATYPE;
		integer NAME1;
		integer NAME2;
	}

	frame Frame_Recv {
		integer DATATYPE toenum=Enum_Type;
		block DATA type=oneof(DATATYPE){ enum_type1 : Frame_type1, enum_type2 : Frame_type2};
	}

	frame Frame_type1 {
		integer NAME1;
		integer NAME2;
	}

	frame Frame_type2 {
		integer AGE1;
		integer AGE2;
	}

	frame Frame_Send_Type2 {
		integer DATATYPE;
		integer AGE1;
		integer AGE2;
	}

	enum Enum_Type {
		enum_type1 = 1,
		enum_type2 = 2
	}

}
