#line 1 "fparser.flex.cpp"

#line 3 "fparser.flex.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer yyFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream>
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex.
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::streambuf* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 124
#define YY_END_OF_BUFFER 125
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[482] =
    {   0,
        0,    0,  125,  123,  121,  120,  123,  123,    9,   10,
        6,    4,   17,    5,  123,    7,  109,  110,   15,   16,
        8,  118,   13,   14,  118,  118,  118,  118,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
      118,   11,   12,  122,  121,    7,  119,    0,    3,    0,
        0,    0,    0,    0,    0,  110,  112,    0,  112,  109,
        0,    0,    0,  110,    0,  118,  118,  118,  118,  118,
      118,  118,  118,  118,  118,  118,   49,   50,  118,  118,
      118,  118,  118,  118,  118,  118,  118,   41,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,

      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  110,
        0,    0,    2,    0,  113,  111,  117,  118,  118,   72,
      118,  118,  118,  118,   45,  118,  118,   44,  118,  118,
      118,  118,  118,  118,  118,   35,  118,  118,  118,   63,
       64,  118,  118,  118,  118,  118,  118,  118,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
      118,   48,  118,  118,  118,  118,  118,    0,    0,    1,
        0,    0,    0,    0,    0,    0,  112,    0,  117,  118,
      118,  118,  118,   29,   30,  118,  118,  118,  118,  118,

      118,  118,  118,  118,   92,  118,  118,   22,  118,  118,
      118,  118,  118,  118,   37,  118,  118,  118,   26,   42,
      118,  118,   40,  118,  118,  118,  118,  118,   76,  118,
       58,  118,  118,   28,   24,  118,   69,   60,   34,  118,
      118,  118,  118,  118,   77,    0,    1,    0,    0,    0,
        0,  116,  118,  118,  118,   27,  118,  118,  118,   65,
      118,  118,  105,  118,  118,  107,  118,  118,  118,  118,
      118,   70,   38,   20,  118,  118,  118,   67,  118,  118,
      118,  118,   31,   33,  118,   71,   78,   82,  118,  118,
      118,  118,   36,  118,   53,   80,   84,    0,    0,    0,

      116,   23,  118,  118,  118,  118,  118,  118,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
      118,   39,  118,  118,  118,  118,  118,  118,  118,  118,
       51,  118,  118,   19,  118,  118,   62,   32,  118,  118,
        0,    0,  115,  118,  118,  118,  118,   21,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  118,  118,
      118,  118,  118,  118,  118,  118,  118,   56,   25,  118,
      118,  118,   18,  118,  118,  118,  118,  118,  118,  118,
      118,    0,    0,  115,  118,   52,  118,   61,  118,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  118,   86,

       87,   88,   89,  108,   90,   91,   93,  118,  118,  118,
       57,  118,   43,   54,  118,  118,  118,  118,  118,  118,
        0,  114,  118,   55,  118,  118,  118,  118,  104,   96,
      118,  118,   98,  102,  118,  118,  118,   94,   74,   73,
      118,  118,   47,   46,  118,  118,    0,  114,   59,   68,
       66,   75,  118,  118,  118,  118,  118,   95,  118,  118,
      118,  118,  100,   97,  118,  118,  118,   79,   83,   81,
       85,  118,   99,  103,  106,  118,  118,  118,  118,  101,
        0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    5,    1,    1,    1,    1,    6,    7,
        8,    9,   10,   11,   12,   13,   14,   15,   16,   17,
       18,   19,   20,   21,   22,   23,   24,   25,   26,    1,
       27,    1,    6,    1,   28,   28,   28,   28,   29,   28,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   31,   30,   30,   32,   30,   30,
       33,   34,   35,    1,   36,    1,   37,   38,   39,   40,

       41,   42,   43,   44,   45,   46,   47,   48,   49,   50,
       51,   52,   30,   53,   54,   55,   56,   57,   58,   59,
       60,   61,   62,    1,   63,    1,    1,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   66,   66,   66,   67,   66,   66,   68,
       69,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,   70,   71,   71,
       71,   71,   72,    1,    1,    1,    1,    1,   73,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[74] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
        1,    2,    3,    1,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    1,    1,    1,    5,    6,    7,
        7,    7,    1,    1,    1,    7,    5,    5,    5,    5,
        6,    5,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1
    } ;

static const flex_int16_t yy_base[516] =
    {   0,
        0,   72, 1206, 1207, 1207, 1207, 1202,   70, 1207, 1207,
     1207, 1207, 1207,   63,   72, 1190,  130,   68, 1207, 1207,
     1207, 1190, 1207, 1207,   64,   66,   69,   70,   85,   71,
      110,   67,   88,   86,  103,   87,  125,  154,  142,   92,
      114, 1207, 1207, 1207,  130, 1188, 1207,  105, 1207,  210,
      152,  265,  212,  270, 1188, 1187,  132, 1196,  139,   75,
      159,  182,    0,  170,    0, 1185,  124,  165,  190,  184,
      188,  195,  193,  199,  189,  145, 1184,  200,  242,  224,
      244,  221,  196,  260,  246,   72,  251,   89,  258,  289,
      248,  255,  261,  284,  301,  262,  291,  294,  297,  293,

      302,  303,  300,  305,  306,  304,  308,  307,  312,  309,
      341, 1182, 1192,  358,    0,    0,    0,  426,  319, 1181,
      330, 1190, 1207,  378,  388,    0, 1179,  337,  371, 1178,
      333,  348,  368,  372, 1177,  373,  402,  375,  424,  310,
      404,  405,  407,  411,  408,  409,  412,  413,  406, 1176,
     1175,  419,  420,  421,  423,  422,  425,  426,  438,  446,
      439,  452,  459,  449,  455,  463,  450,  460,  461,  443,
      445, 1174,  467,  470,  472,  474,  503, 1183, 1182, 1207,
      526,    0,  594,    0,  501,  534,  546,    0, 1171,  488,
      475,  523,  546, 1170,  524,  527,  572,  573,  241,  351,

      496,  497,  568,  502,  566,  576,  494, 1169,  567,  570,
      579,  563,  577,  571, 1168,  587,  581,  626, 1167,  590,
      624,  627, 1166,  588,  628,  594,  631,  352, 1165,  632,
     1164,  633,  634, 1163, 1162,  592, 1161, 1160, 1159,  636,
      637,  641,  638,  353, 1158, 1167, 1207,  650,    0,    0,
        0, 1156,  643,  644,  640, 1155,  645,  647,  650,  649,
      658,  659,  661,  663,  670,  664,  665,  657,  674,  673,
      675, 1154, 1153, 1152,  676,  681,  667, 1151,  688,  690,
      691,  694, 1150, 1149,  696, 1148,  705,  711,  699,  700,
      712,  715, 1147,  717, 1146,  718,  719,    0,    0,    0,

     1145, 1144,  720,  721,  726,  724,  725,  731,  727,  738,
      733,  737,  739,  740,  744,  191,  745,  750,  746,  743,
      754, 1143,  748,  749,  761,  756,  762,  757,  766,  768,
     1142,  771,  773, 1141,  777,  776, 1140, 1139,  780,  783,
        0,  798, 1138,  795,  797,  798,  801, 1137,  803,  806,
      807,  808,  810,  813,  811,  814,  815,  816,  817,  821,
      822,  825,  823,  832,  824,  827,  831, 1136, 1135,  836,
      841,  828, 1134,  838,  844,  846,  860,  842,  848,  861,
      863,    0,    0, 1133,  865, 1069,  849,  868,  875,  878,
      880,  881,  882,  883,  886,  891,  575,  888,  894, 1044,

     1041, 1030, 1018, 1005, 1004, 1003, 1002,  892,  895,  890,
     1001,  897, 1000,  998,  896,  898,  899,  900,  901,  902,
        0,    0,  907,  996,  903,  910,  904,  908,  995,  993,
      911,  909,  992,  990,  928,  917,  923,  984,  983,  979,
      919,  930,  973,  972,  935,  939,    0,    0,  970,  969,
      968,  967,  914,  942,  945,  949,  951,  578,  953,  954,
      957,  958,  952,  569,  948,  961,  354,  516,  515,  514,
      511,  962,  505,  500,  499,  963,  964,  965,  966,  495,
     1207, 1019, 1024, 1026, 1030, 1035, 1037, 1038, 1044, 1049,
     1054, 1055, 1057, 1064, 1068, 1071, 1074, 1079, 1081, 1088,

     1092, 1095, 1097, 1101, 1104, 1108, 1112, 1115, 1117, 1121,
     1125, 1129, 1131, 1135, 1138
    } ;

static const flex_int16_t yy_def[516] =
    {   0,
      481,    1,  481,  481,  481,  481,  481,  482,  481,  481,
      481,  481,  481,  483,  481,  481,  481,  484,  481,  481,
      481,  485,  481,  481,  485,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
      485,  481,  481,  481,  481,  481,  481,  482,  481,  481,
      482,  482,  482,  481,  486,  487,  488,  489,  488,   17,
      490,  491,  492,  484,  493,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  485,  485,  485,  485,  485,

      485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
      481,  481,  494,  482,  495,  496,  497,  482,  482,  487,
      498,  489,  481,  481,  481,  492,  499,  485,  485,  485,
      485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  485,  485,  500,  494,  481,
      482,  501,  482,  502,  482,  481,  481,  503,  499,  485,
      485,  485,  485,  485,  485,  485,  485,  485,  485,  485,

      485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  500,  481,  482,  504,  183,
      505,  506,  485,  485,  485,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  485,  485,  507,  508,  509,

      506,  485,  485,  485,  485,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
      510,  482,  511,  485,  485,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
      485,  512,  513,  511,  485,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  485,  485,  485,  485,  485,

      485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
      514,  515,  485,  485,  485,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  485,  508,  515,  485,  485,
      485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
        0,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,

      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481
    } ;

static const flex_int16_t yy_nxt[1281] =
    {   0,
        4,    5,    6,    7,    8,    4,    9,   10,   11,   12,
       13,   14,   15,   16,   17,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   19,   20,   21,   22,   22,   22,
       22,   22,   23,    4,   24,   22,   25,   26,   27,   28,
       29,   30,   22,   22,   31,   22,   22,   32,   33,   22,
       34,   35,   36,   37,   38,   39,   40,   22,   41,   22,
       22,   42,   43,    4,    4,    4,   44,    4,   44,    4,
        4,    4,   44,   45,   49,   54,   65,   55,   65,   65,
       59,   65,   65,   65,   65,   46,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   62,   65,   65,   65,

       65,   65,   67,   50,   65,   73,  481,   80,   62,   49,
       69,   68,   74,   70,   77,   65,   71,   85,   81,   75,
       78,   76,   65,   82,   86,   72,   65,   90,  109,  152,
      150,  111,   87,  481,   79,   88,   65,   65,   50,   51,
       52,   53,   59,  112,   60,   60,   60,   60,   60,   60,
       60,   60,   61,   61,   65,   89,   49,   65,   62,   83,
      121,   63,   91,   84,  110,   92,   65,  121,   93,   94,
       62,   59,  121,   95,   51,   52,   53,   65,  128,  121,
       96,  105,   59,  139,   97,   50,  106,   62,   63,  107,
       98,  124,   99,  124,  100,  108,   65,  101,   62,   62,

       65,   65,   65,   65,  102,   65,  103,   65,   65,  129,
       62,   65,   65,  104,   48,   48,   49,  118,  118,  118,
      118,   51,   52,   53,  114,  114,  114,  114,  114,  114,
      114,  114,  130,   65,  132,  136,   65,  138,  133,  137,
      115,  116,  135,   48,  131,   50,   48,   48,  362,  134,
      146,   48,  147,   65,   65,  140,   65,  145,   65,   48,
       65,  262,   48,   65,   48,  117,   48,   65,  116,   49,
       65,  143,   65,   65,   65,  118,  118,  118,  118,  119,
      141,   51,   52,   53,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,  144,  149,   65,  142,   50,  148,

      151,   65,  153,   65,  159,   65,   65,  158,  154,   65,
      163,  160,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   49,   65,  155,  161,  156,  118,  118,
      118,  118,  118,  118,   51,   52,   53,  162,  165,  186,
      157,  186,  111,  169,  164,   65,  168,  206,  166,   65,
      175,  167,   50,  173,  112,  170,  171,  172,  174,  176,
       65,  177,   49,   65,   65,   65,   65,  263,  288,  297,
      475,  192,  181,  181,  181,  181,  181,  181,  181,  181,
       65,  190,  185,   65,   65,   65,  193,   65,   51,   52,
       53,   50,  125,  125,  125,  125,  125,  125,  125,  125,

      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  195,  191,   65,  194,   65,   65,   65,   65,
       65,   65,  196,   65,   65,   65,  198,   51,   52,   53,
       49,   65,   65,   65,   65,   65,   65,   65,   65,  199,
      197,  200,  201,  202,  203,  204,  205,  210,  215,  212,
       65,   65,  213,  208,  207,   65,  211,   65,   65,   50,
      209,   65,   65,  214,   65,  221,  218,   65,  217,  216,
      219,   65,   65,   65,  227,   65,  228,  223,  220,   65,
      222,  229,   65,  237,   65,  238,   65,   65,  225,  185,
      185,  185,  185,  185,  185,   51,   52,   53,  224,  226,

       65,  232,  231,  230,  234,   49,   65,   65,   65,   65,
      236,   65,   65,  235,   65,   65,  233,   65,  243,  240,
      244,  239,  241,   65,  254,  245,   65,   65,   65,  242,
       49,  264,  265,  271,   50,   65,   65,  268,  253,   65,
      248,  248,  248,  248,  248,  248,  248,  248,  187,  187,
      187,  187,  187,  187,  187,  187,  187,  187,   65,   50,
      187,  187,  187,  187,  187,  187,  187,  187,  187,  187,
       51,   52,   53,  255,  257,   65,  259,  258,   65,   65,
       65,   65,   65,   65,   65,   65,  266,   65,   65,   65,
       65,   65,  256,   65,  434,   51,   52,   53,   49,   65,

       65,  269,   65,  267,   65,  275,   65,  272,  250,  250,
      250,  250,  250,  250,  250,  250,  250,  250,  260,  274,
      261,  250,  250,  270,  273,  279,  277,   50,  278,  276,
      250,  250,  250,  250,  250,  250,   65,  281,   65,   65,
       65,  286,  284,   65,   65,   65,   65,  292,   65,   65,
       65,  287,   65,   65,   49,   65,   65,   65,  296,   65,
      282,   65,   65,   51,   52,   53,  280,  283,  285,   65,
       65,   65,  289,   65,  291,   65,   65,   65,  293,   65,
      290,  295,   65,   50,  303,   65,   65,   65,   65,  294,
      307,  306,  302,   65,  310,  304,  311,  305,  309,  316,

       65,  308,   65,   65,  326,  318,   65,  312,   65,  317,
      313,   65,   65,  322,  314,  323,  324,   65,  319,   51,
       52,   53,  320,   65,   65,  315,  321,   65,  328,   65,
       65,   65,   65,   65,  325,  331,   65,   65,   65,   65,
      332,  329,  327,   65,  335,   65,  333,  334,  330,   65,
       65,   65,   65,  339,  340,   65,   65,   65,   65,  344,
       65,   65,   65,  337,  336,  346,   65,  349,   65,   65,
      345,  338,  348,   65,   65,  350,  351,  352,   65,  366,
       65,  357,  353,   65,  347,   65,  354,  368,   65,   65,
      359,  358,   65,  355,  360,   65,  356,  361,  364,  363,

      365,  369,   49,  371,  367,  370,  372,   65,  375,   65,
       65,  373,  376,   65,  377,   65,  374,  378,   65,   65,
       65,  380,   65,   65,  381,   65,   65,   65,   65,   65,
      397,   50,  379,   65,   65,   65,   65,   65,  387,   65,
       65,  388,  385,   65,   65,  391,  390,  393,   65,  394,
       65,  386,  389,   65,   65,  401,   65,  392,   65,  403,
       65,   65,  398,  395,  396,  404,  399,   51,   52,   53,
      406,  400,   65,   65,  409,   65,  402,   65,  405,  407,
       65,  411,  415,  414,  412,  408,  410,   65,  418,  413,
       65,  417,   65,   65,   65,   65,  416,  419,   65,  420,

       65,  424,   65,   65,   65,  423,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,  426,  425,   65,
       65,   65,   65,   65,  428,  432,   65,  427,  433,   65,
      430,   65,  429,  438,  436,   65,  437,  440,  435,  439,
       65,  431,   65,  441,  450,  442,  455,   65,  445,  446,
      451,   65,  444,  443,   65,  454,  449,   65,  452,  457,
       65,   65,  453,   65,   65,   65,   65,  456,  463,   65,
       65,  458,  459,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,  460,   65,   65,  467,  472,  461,  466,
      464,   65,  462,  468,  469,   65,   65,  470,  471,  477,

      465,  473,   65,  476,   65,   65,  480,   65,   65,  474,
       65,  478,   65,   65,   65,   65,   65,   65,  479,   48,
       48,   48,   48,   48,   48,   48,   56,   56,   64,   64,
       65,   64,   66,   66,   66,   66,   66,   55,   55,  120,
      120,   57,   65,   57,  122,  122,  122,  122,  122,  122,
      122,   61,   61,   65,   61,  125,   65,  125,  126,  126,
      126,  127,  127,  127,  179,  179,  179,  179,  179,  179,
      179,  182,  182,  182,  183,  183,  183,  184,  184,  184,
      187,   65,  187,  189,  189,  189,  189,  189,  246,  246,
      246,  246,  246,  246,  246,  249,  249,  249,  251,  251,

      251,  252,  252,  252,  298,  298,  298,  299,  299,  299,
      301,  301,  301,  301,  301,  341,  341,  341,  342,  342,
      342,  343,  343,  343,  382,  382,  382,  384,  384,  384,
      384,  384,  421,  421,  421,  422,  422,  422,  447,  447,
      447,  448,  448,  448,  448,  383,   65,   65,   65,   65,
      383,   65,   65,   65,   65,   65,   65,  300,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,  300,  247,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,  188,  180,  247,   65,   65,   65,   65,
       65,  188,  123,   59,  180,  178,   65,   65,  123,   59,

       59,  113,   65,   58,   47,  481,    3,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481
    } ;

static const flex_int16_t yy_chk[1281] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    2,    8,   14,   25,   14,   26,   32,
       18,   27,   28,   30,   86,    2,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   18,   29,   34,   36,

       33,   88,   25,    8,   40,   27,   60,   30,   18,   48,
       26,   25,   27,   26,   28,   35,   26,   32,   30,   27,
       28,   27,   31,   30,   33,   26,   41,   36,   40,   88,
       86,   45,   33,   60,   29,   34,   67,   37,   48,    8,
        8,    8,   17,   45,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   39,   35,   51,   76,   17,   31,
       57,   17,   37,   31,   41,   37,   38,   59,   37,   37,
       17,   61,   57,   37,   48,   48,   48,   68,   67,   59,
       37,   39,   64,   76,   37,   51,   39,   61,   17,   39,
       38,   62,   38,   62,   38,   39,   70,   38,   64,   61,

       71,   75,   69,  316,   38,   73,   38,   72,   83,   68,
       64,   74,   78,   38,   50,   50,   53,   51,   51,   51,
       51,   51,   51,   51,   50,   50,   50,   50,   50,   50,
       50,   50,   69,   82,   70,   74,   80,   75,   71,   74,
       50,   50,   73,   50,   69,   53,   50,   50,  316,   72,
       83,   50,   83,  199,   79,   78,   81,   82,   85,   50,
       91,  199,   50,   87,   50,   50,   50,   92,   50,   52,
       89,   80,   84,   93,   96,   53,   53,   53,   53,   53,
       79,   53,   53,   53,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   81,   85,   94,   79,   52,   84,

       87,   90,   89,   97,   92,  100,   98,   91,   89,   99,
       96,   93,  103,   95,  101,  102,  106,  104,  105,  108,
      107,  110,  140,  119,  109,   90,   94,   90,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   95,   98,  121,
       90,  121,  111,  102,   97,  131,  101,  140,   99,  128,
      108,  100,  119,  106,  111,  103,  104,  105,  107,  109,
      132,  110,  114,  200,  228,  244,  467,  200,  228,  244,
      467,  131,  114,  114,  114,  114,  114,  114,  114,  114,
      133,  128,  119,  129,  134,  136,  132,  138,  119,  119,
      119,  114,  124,  124,  124,  124,  124,  124,  124,  124,

      124,  124,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  134,  129,  137,  133,  141,  142,  149,  143,
      145,  146,  136,  144,  147,  148,  138,  114,  114,  114,
      118,  152,  153,  154,  156,  155,  139,  157,  158,  139,
      137,  139,  139,  139,  139,  139,  139,  144,  149,  146,
      159,  161,  147,  142,  141,  170,  145,  171,  160,  118,
      143,  164,  167,  148,  162,  157,  154,  165,  153,  152,
      155,  163,  168,  169,  163,  166,  163,  159,  156,  173,
      158,  163,  174,  170,  175,  171,  176,  191,  161,  118,
      118,  118,  118,  118,  118,  118,  118,  118,  160,  162,

      190,  166,  165,  164,  167,  185,  207,  480,  201,  202,
      169,  475,  474,  168,  204,  177,  166,  473,  177,  174,
      177,  173,  175,  471,  191,  177,  470,  469,  468,  176,
      181,  201,  202,  207,  185,  192,  195,  204,  190,  196,
      181,  181,  181,  181,  181,  181,  181,  181,  186,  186,
      186,  186,  186,  186,  186,  186,  186,  186,  193,  181,
      187,  187,  187,  187,  187,  187,  187,  187,  187,  187,
      185,  185,  185,  192,  195,  212,  196,  195,  205,  209,
      203,  464,  210,  214,  197,  198,  203,  397,  206,  213,
      458,  211,  193,  217,  397,  181,  181,  181,  183,  216,

      224,  205,  220,  203,  236,  212,  226,  209,  183,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  197,  211,
      198,  183,  183,  206,  210,  217,  214,  183,  216,  213,
      183,  183,  183,  183,  183,  183,  221,  220,  218,  222,
      225,  226,  224,  227,  230,  232,  233,  236,  240,  241,
      243,  227,  255,  242,  248,  253,  254,  257,  243,  258,
      221,  260,  259,  183,  183,  183,  218,  222,  225,  268,
      261,  262,  230,  263,  233,  264,  266,  267,  240,  277,
      232,  242,  265,  248,  254,  270,  269,  271,  275,  241,
      259,  258,  253,  276,  262,  255,  263,  257,  261,  266,

      279,  260,  280,  281,  277,  268,  282,  264,  285,  267,
      265,  289,  290,  270,  265,  271,  275,  287,  269,  248,
      248,  248,  269,  288,  291,  265,  269,  292,  280,  294,
      296,  297,  303,  304,  276,  285,  306,  307,  305,  309,
      287,  281,  279,  308,  290,  311,  288,  289,  282,  312,
      310,  313,  314,  296,  297,  320,  315,  317,  319,  303,
      323,  324,  318,  292,  291,  305,  321,  308,  326,  328,
      304,  294,  307,  325,  327,  309,  310,  310,  329,  320,
      330,  311,  310,  332,  306,  333,  310,  323,  336,  335,
      313,  312,  339,  310,  314,  340,  310,  315,  318,  317,

      319,  324,  342,  326,  321,  325,  327,  344,  330,  345,
      346,  328,  332,  347,  333,  349,  329,  335,  350,  351,
      352,  339,  353,  355,  340,  354,  356,  357,  358,  359,
      356,  342,  336,  360,  361,  363,  365,  362,  346,  366,
      372,  347,  344,  367,  364,  351,  350,  353,  370,  354,
      374,  345,  349,  371,  378,  359,  375,  352,  376,  361,
      379,  387,  356,  354,  355,  362,  357,  342,  342,  342,
      364,  358,  377,  380,  367,  381,  360,  385,  363,  365,
      388,  371,  376,  375,  372,  366,  370,  389,  379,  374,
      390,  378,  391,  392,  393,  394,  377,  380,  395,  381,

      398,  387,  410,  396,  408,  385,  399,  409,  415,  412,
      416,  417,  418,  419,  420,  425,  427,  389,  388,  423,
      428,  432,  426,  431,  391,  395,  453,  390,  396,  436,
      393,  441,  392,  409,  399,  437,  408,  412,  398,  410,
      435,  394,  442,  415,  425,  416,  432,  445,  419,  420,
      426,  446,  418,  417,  454,  431,  423,  455,  427,  436,
      465,  456,  428,  457,  463,  459,  460,  435,  453,  461,
      462,  437,  441,  466,  472,  476,  477,  478,  479,  452,
      451,  450,  449,  442,  444,  443,  457,  463,  445,  456,
      454,  440,  446,  459,  460,  439,  438,  461,  462,  476,

      455,  465,  434,  472,  433,  430,  479,  429,  424,  466,
      414,  477,  413,  411,  407,  406,  405,  404,  478,  482,
      482,  482,  482,  482,  482,  482,  483,  483,  484,  484,
      403,  484,  485,  485,  485,  485,  485,  486,  486,  487,
      487,  488,  402,  488,  489,  489,  489,  489,  489,  489,
      489,  490,  490,  401,  490,  491,  400,  491,  492,  492,
      492,  493,  493,  493,  494,  494,  494,  494,  494,  494,
      494,  495,  495,  495,  496,  496,  496,  497,  497,  497,
      498,  386,  498,  499,  499,  499,  499,  499,  500,  500,
      500,  500,  500,  500,  500,  501,  501,  501,  502,  502,

      502,  503,  503,  503,  504,  504,  504,  505,  505,  505,
      506,  506,  506,  506,  506,  507,  507,  507,  508,  508,
      508,  509,  509,  509,  510,  510,  510,  511,  511,  511,
      511,  511,  512,  512,  512,  513,  513,  513,  514,  514,
      514,  515,  515,  515,  515,  384,  373,  369,  368,  348,
      343,  338,  337,  334,  331,  322,  302,  301,  295,  293,
      286,  284,  283,  278,  274,  273,  272,  256,  252,  246,
      245,  239,  238,  237,  235,  234,  231,  229,  223,  219,
      215,  208,  194,  189,  179,  178,  172,  151,  150,  135,
      130,  127,  122,  120,  113,  112,   77,   66,   58,   56,

       55,   46,   22,   16,    7,    3,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481
    } ;

/* Table of booleans, true if rule could match eol. */
static const flex_int32_t yy_rule_can_match_eol[125] =
    {   0,
1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 
    1, 0, 0, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "fparser.l"
#line 13 "fparser.l"
#define YY_DECL int yyFlexLexer::yylex(YYSTYPE* yylval, YYLTYPE* yylloc, FrameIOParserDb* db)

#include "stdafx.h"
#include "fparser.h"
#include "fparser.tab.h"
#include <FlexLexer.h>
#include "FrameIOParserDb.h"


int yycolumn = 1;
int utf8len = 0;

#define YY_USER_ACTION utf8len = get_utf8_length(yytext, yyleng); yylloc->first_line = yylloc->last_line = yylineno; \
	yylloc->first_column = yycolumn; yylloc->last_column = yycolumn + utf8len - 1; \
	yycolumn += utf8len;
#line 891 "fparser.flex.cpp"
#line 892 "fparser.flex.cpp"

#define INITIAL 0

/*windows compatibility case*/
#include <io.h>
#define isatty _isatty
#define fileno _fileno
    
#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (int)(result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin.rdbuf(std::cin.rdbuf());

		if ( ! yyout )
			yyout.rdbuf(std::cout.rdbuf());

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 29 "fparser.l"



#line 1028 "fparser.flex.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 482 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1207 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 32 "fparser.l"
{ yycolumn = 1; yylval->symbol = db->SaveSymbol(yytext, yylloc->first_line-1, yylloc->first_column, yylloc->last_column-1);  return T_NOTE; }
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 33 "fparser.l"
{ yycolumn = 1; }
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 36 "fparser.l"
{ yylval->symbol = db->SaveSymbol(yytext, yylloc->first_line, yylloc->first_column, yylloc->last_column); return VALUE_STRING; }
	YY_BREAK
case 4:
#line 39 "fparser.l"
case 5:
#line 40 "fparser.l"
case 6:
#line 41 "fparser.l"
case 7:
#line 42 "fparser.l"
case 8:
#line 43 "fparser.l"
case 9:
#line 44 "fparser.l"
case 10:
#line 45 "fparser.l"
case 11:
#line 46 "fparser.l"
case 12:
#line 47 "fparser.l"
case 13:
#line 48 "fparser.l"
case 14:
#line 49 "fparser.l"
case 15:
#line 50 "fparser.l"
case 16:
#line 51 "fparser.l"
case 17:
YY_RULE_SETUP
#line 51 "fparser.l"
{ return yytext[0]; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 54 "fparser.l"
{ return T_PROJECT; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 55 "fparser.l"
{ return T_SYSTEM; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 56 "fparser.l"
{ return T_FRAME; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 57 "fparser.l"
{ return T_CHANNEL; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 58 "fparser.l"
{ return T_ENUM; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 59 "fparser.l"
{ return T_ACTION; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 60 "fparser.l"
{ return T_THIS; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 62 "fparser.l"
{ return T_INTEGER; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 63 "fparser.l"
{ return T_REAL; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 64 "fparser.l"
{ return T_BLOCK; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 65 "fparser.l"
{ return T_TEXT; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 67 "fparser.l"
{ return T_BOOL; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 68 "fparser.l"
{ return T_BYTE; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 69 "fparser.l"
{ return T_SBYTE; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 70 "fparser.l"
{ return T_USHORT; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 71 "fparser.l"
{ return T_SHORT; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 72 "fparser.l"
{ return T_UINT; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 73 "fparser.l"
{ return T_INT; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 74 "fparser.l"
{ return T_ULONG; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 75 "fparser.l"
{ return T_LONG; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 76 "fparser.l"
{ return T_FLOAT; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 77 "fparser.l"
{ return T_DOUBLE; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 79 "fparser.l"
{ return T_SEND; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 80 "fparser.l"
{ return T_ON; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 81 "fparser.l"
{ return T_RECV; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 82 "fparser.l"
{ return T_RECVLOOP; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 84 "fparser.l"
{ return T_COM; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 85 "fparser.l"
{ return T_CAN; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 86 "fparser.l"
{ return T_TCPSERVER; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 87 "fparser.l"
{ return T_TCPCLIENT; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 88 "fparser.l"
{ return T_UDP; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 89 "fparser.l"
{ return T_DI; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 90 "fparser.l"
{ return T_DO; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 92 "fparser.l"
{ return T_SIGNED; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 93 "fparser.l"
{ return T_BITCOUNT; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 94 "fparser.l"
{ return T_VALUE; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 95 "fparser.l"
{ return T_REPEATED; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 96 "fparser.l"
{ return T_BYTEORDER; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 97 "fparser.l"
{ return T_ENCODED; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 98 "fparser.l"
{ return T_ISDOUBLE; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 99 "fparser.l"
{ return T_TAIL; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 100 "fparser.l"
{ return T_ALIGNEDLEN; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 101 "fparser.l"
{ return T_TYPE; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 102 "fparser.l"
{ return T_BYTESIZE; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 103 "fparser.l"
{ return T_TOENUM; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 104 "fparser.l"
{ return T_MAX; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 105 "fparser.l"
{ return T_MIN; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 106 "fparser.l"
{ return T_CHECK; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 107 "fparser.l"
{ return T_CHECKRANGE;}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 109 "fparser.l"
{ return T_ONEOF; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 110 "fparser.l"
{ return T_BYTESIZEOF; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 112 "fparser.l"
{ return T_TRUE; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 113 "fparser.l"
{ return T_FALSE; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 114 "fparser.l"
{ return T_SMALL; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 115 "fparser.l"
{ return T_BIG; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 116 "fparser.l"
{ return T_PRIMITIVE; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 117 "fparser.l"
{ return T_INVERSION; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 118 "fparser.l"
{ return T_COMPLEMENT; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 120 "fparser.l"
{ return T_SUM8; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 121 "fparser.l"
{ return T_XOR8; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 122 "fparser.l"
{ return T_SUM16; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 123 "fparser.l"
{ return T_SUM16_FALSE; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 124 "fparser.l"
{ return T_XOR16; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 125 "fparser.l"
{ return T_XOR16_FALSE; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 126 "fparser.l"
{ return T_SUM32; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 127 "fparser.l"
{ return T_SUM32_FALSE; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 128 "fparser.l"
{ return T_XOR32; }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 129 "fparser.l"
{ return T_XOR32_FALSE; }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 130 "fparser.l"
{ return T_CRC4_ITU; }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 131 "fparser.l"
{ return T_CRC5_EPC; }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 132 "fparser.l"
{ return T_CRC5_ITU; }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 133 "fparser.l"
{ return T_CRC5_USB; }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 134 "fparser.l"
{ return T_CRC6_ITU; }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 135 "fparser.l"
{ return T_CRC7_MMC; }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 136 "fparser.l"
{ return T_CRC8; }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 137 "fparser.l"
{ return T_CRC8_ITU; }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 138 "fparser.l"
{ return T_CRC8_ROHC; }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 139 "fparser.l"
{ return T_CRC8_MAXIM; }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 140 "fparser.l"
{ return T_CRC16_IBM; }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 141 "fparser.l"
{ return T_CRC16_MAXIM; }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 142 "fparser.l"
{ return T_CRC16_USB; }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 143 "fparser.l"
{ return T_CRC16_MODBUS; }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 144 "fparser.l"
{ return T_CRC16_CCITT; }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 145 "fparser.l"
{ return T_CRC16_CCITT_FALSE; }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 146 "fparser.l"
{ return T_CRC16_X25; }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 147 "fparser.l"
{ return T_CRC16_XMODEM; }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 148 "fparser.l"
{ return T_CRC16_DNP; }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 149 "fparser.l"
{ return T_CRC32; }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 150 "fparser.l"
{ return T_CRC32_MPEG_2; }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 151 "fparser.l"
{ return T_CRC64; }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 152 "fparser.l"
{ return T_CRC64_WE; }
	YY_BREAK
case 109:
#line 156 "fparser.l"
case 110:
#line 157 "fparser.l"
case 111:
YY_RULE_SETUP
#line 157 "fparser.l"
{ yylval->symbol = db->SaveSymbol(yytext, yylloc->first_line, yylloc->first_column, yylloc->last_column); return VALUE_INT; }
	YY_BREAK
case 112:
#line 160 "fparser.l"
case 113:
YY_RULE_SETUP
#line 160 "fparser.l"
{ yylval->symbol = db->SaveSymbol(yytext, yylloc->first_line, yylloc->first_column, yylloc->last_column); return VALUE_REAL; }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 162 "fparser.l"
{ yylval->symbol = db->SaveSymbol(yytext, yylloc->first_line, yylloc->first_column, yylloc->last_column); return T_UNION_ID; }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 163 "fparser.l"
{ yylval->symbol = db->SaveSymbol(yytext, yylloc->first_line, yylloc->first_column, yylloc->last_column); return T_UNION_ID; }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 164 "fparser.l"
{ yylval->symbol = db->SaveSymbol(yytext, yylloc->first_line, yylloc->first_column, yylloc->last_column); return T_UNION_ID; }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 165 "fparser.l"
{ yylval->symbol = db->SaveSymbol(yytext, yylloc->first_line, yylloc->first_column, yylloc->last_column); return T_UNION_ID; }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 166 "fparser.l"
{ yylval->symbol = db->SaveSymbol(yytext, yylloc->first_line, yylloc->first_column, yylloc->last_column); return T_ID; }
	YY_BREAK
case 119:
/* rule 119 can match eol */
YY_RULE_SETUP
#line 169 "fparser.l"
{ yycolumn=1; }
	YY_BREAK
case 120:
/* rule 120 can match eol */
YY_RULE_SETUP
#line 170 "fparser.l"
{ yycolumn=1; }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 171 "fparser.l"
{ ; }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 173 "fparser.l"
{ yycolumn=1; }
	YY_BREAK
case YY_STATE_EOF(INITIAL):
#line 174 "fparser.l"
{ return 0; }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 175 "fparser.l"
{ yylval->symbol = db->SaveSymbol(yytext, yylloc->first_line, yylloc->first_column, yylloc->last_column);  db->SaveError(ERROR_CODE_SYMBOL, yylval->symbol, yylval->symbol);  }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 176 "fparser.l"
ECHO;
	YY_BREAK
#line 1677 "fparser.flex.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin.rdbuf();
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 * This constructor simply maintains backward compatibility.
 * DEPRECATED
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout ):
	yyin(arg_yyin ? arg_yyin->rdbuf() : std::cin.rdbuf()),
	yyout(arg_yyout ? arg_yyout->rdbuf() : std::cout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream& arg_yyin, std::ostream& arg_yyout ):
	yyin(arg_yyin.rdbuf()),
	yyout(arg_yyout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::ctor_common()
{
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = NULL;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree( yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyfree( yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream& new_in, std::ostream& new_out )
{
	// was if( new_in )
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );

	// was if( new_out )
	yyout.rdbuf(new_out.rdbuf());
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if( ! new_in ) {
		new_in = &yyin;
	}

	if ( ! new_out ) {
		new_out = &yyout;
	}

	switch_streams(*new_in, *new_out);
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin.eof() || yyin.fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin.get( buf[0] );

	if ( yyin.eof() )
		return 0;

	if ( yyin.bad() )
		return -1;

	return 1;

#else
	(void) yyin.read( buf, max_size );

	if ( yyin.bad() )
		return -1;
	else
		return yyin.gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout.write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 482 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 482 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 481);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT
    void yyFlexLexer::yyunput( int c, char* yy_bp)
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
#endif

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');
	if ( YY_CURRENT_BUFFER_LVALUE->yy_at_bol )
		
    yylineno++;
;

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream& input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Delegate to the new version that takes an istream reference.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
void yyFlexLexer::yyrestart( std::istream* input_file )
{
	if( ! input_file ) {
		input_file = &yyin;
	}
	yyrestart( *input_file );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin.rdbuf(YY_CURRENT_BUFFER_LVALUE->yy_input_file);
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream& file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Delegate creation of buffers to the new version that takes an istream reference.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
	YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	return yy_create_buffer( *file, size );
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream& file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file.rdbuf();
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int _new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_size_t) (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc( new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc(
					(void *) (yy_start_stack), new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(_new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( const char* msg )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 176 "fparser.l"


