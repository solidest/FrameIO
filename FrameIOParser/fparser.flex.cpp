#line 1 "fparser.flex.cpp"

#line 3 "fparser.flex.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer yyFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream>
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex.
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::streambuf* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 114
#define YY_END_OF_BUFFER 115
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[452] =
    {   0,
        0,    0,  115,  113,  111,  110,  113,  113,   10,   11,
        7,    5,   18,    6,  113,    8,   99,  100,   16,   17,
        9,  113,  108,   14,   15,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,   12,   13,  112,  111,    8,  109,    0,    4,    0,
        0,    0,    0,    0,    0,  102,    0,  102,   99,    0,
        0,    0,  100,    0,    3,    0,  108,  108,  108,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  108,   31,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,

      108,  108,  108,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    2,    0,  103,  101,  107,  108,
      108,   62,  108,  108,  108,   35,  108,  108,   34,  108,
       39,  108,  108,  108,  108,  108,  108,  108,   52,   53,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  108,   38,
      108,  108,    0,    0,    1,    0,    0,    0,    0,    0,
        0,  102,    0,  107,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  108,  108,  108,  108,   82,  108,
       23,  108,  108,  108,  108,  108,  108,  108,  108,  108,

       27,   32,  108,   30,  108,  108,  108,  108,   66,  108,
       47,  108,  108,   29,   25,  108,   59,   49,  108,  108,
      108,   67,    0,    1,    0,    0,    0,    0,  106,  108,
      108,  108,   28,  108,  108,  108,   54,  108,  108,   95,
      108,  108,   97,  108,  108,  108,  108,   60,   21,  108,
      108,  108,   56,   57,  108,  108,  108,  108,  108,   61,
       68,   72,  108,  108,  108,  108,   42,   70,   74,    0,
        0,    0,  106,   24,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,

      108,   40,  108,  108,   20,  108,  108,   51,  108,  108,
        0,    0,  105,  108,  108,  108,  108,   22,  108,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  108,  108,  108,   45,   26,  108,
      108,  108,   19,  108,  108,  108,  108,  108,  108,  108,
      108,    0,    0,  105,  108,   41,  108,   50,  108,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  108,   76,
       77,   78,   79,   98,   80,   81,   83,  108,  108,  108,
       46,  108,   33,   43,  108,  108,  108,  108,  108,  108,
        0,  104,  108,   44,  108,  108,  108,  108,   94,   86,

      108,  108,   88,   92,  108,  108,  108,   84,   64,   63,
      108,  108,   37,   36,  108,  108,    0,  104,   48,   58,
       55,   65,  108,  108,  108,  108,  108,   85,  108,  108,
      108,  108,   90,   87,  108,  108,  108,   69,   73,   71,
       75,  108,   89,   93,   96,  108,  108,  108,  108,   91,
        0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    5,    1,    1,    1,    1,    6,    7,
        8,    9,   10,   11,   12,   13,   14,   15,   16,   17,
       18,   19,   20,   21,   22,   23,   24,   25,   26,    1,
       27,    1,    6,   28,   29,   29,   29,   29,   30,   29,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   32,   31,   31,   33,   31,   31,
       34,   35,   36,    1,   37,    1,   38,   39,   40,   41,

       42,   43,   44,   45,   46,   47,   48,   49,   50,   51,
       52,   53,   31,   54,   55,   56,   57,   58,   59,   60,
       61,   62,   63,    1,   64,    1,    1,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   66,   66,   66,   66,   66,
       66,   66,   66,   66,   66,   66,   66,   66,   66,   66,
       66,   66,   66,   67,   67,   67,   68,   67,   67,   69,
       70,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,   71,   72,   72,
       72,   72,   73,    1,    1,    1,    1,    1,   74,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[75] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
        1,    2,    3,    1,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    1,    1,    1,    1,    5,    6,
        7,    7,    7,    1,    1,    1,    7,    5,    5,    5,
        5,    6,    5,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1
    } ;

static const flex_int16_t yy_base[484] =
    {   0,
        0,   73, 1166, 1167, 1167, 1167, 1162,   71, 1167, 1167,
     1167, 1167, 1167,   73,   92, 1150,  132,   87, 1167, 1167,
     1167, 1160, 1149, 1167, 1167,   85,   72,   86,   89,   68,
       66,   71,   90,  110,   92,   88,  126,  144,  119,  150,
      128, 1167, 1167, 1167,  156, 1147, 1167,  159, 1167,  228,
      168,  186,  237,  191,  274,  129, 1157,  137,  142,  186,
       68,    0,  187, 1156, 1167,    0, 1145,  164,  172,  255,
      210,  168,  213,  287,  177,  182,  260,  261,  264,  294,
      263,  156,  165,  265,  301,  270,  304,  307,  310,  309,
      311,  313,  314,  318,  315,  317,  320,  323,   70,  321,

      322,  324,  325,  267, 1143, 1153,  375,    0,    0,    0,
      335,  346,  329, 1152, 1167,  405,  415,    0, 1141,  339,
      342, 1140,  331,  344,  341, 1139,  363,  349,  329,  436,
     1138,  335,  359,  333,  365,  399,  400,  346, 1137, 1136,
      427,  403,  430,  431,  437,  438,  440,  447,  448,  449,
      450,  451,  452,  454,  456,  458,  457,  461,  462, 1135,
      459,  474, 1144, 1143, 1167,  512,    0,  581,    0,  471,
      533,  543,    0, 1132,  468,  464,  470,  471,  522,  472,
      476,  487,  180,  478,  489,  501,  556,  508,  533,  498,
     1131,  565,  566,  497,  345,  480,  563,  527,  567,  575,

     1130,  560,  574, 1129,  576,  577,  612,  555, 1128,  601,
     1127,  578,  602, 1126, 1125,  579, 1124, 1123,  615,  616,
      617, 1122, 1131, 1167,  626,    0,    0,    0, 1120,  581,
      622,  582, 1119,  625,  627,  628,  629,  632,  634,  635,
      636,  638,  649,  642,  637,  646,  633, 1118, 1117,  643,
      647,  650, 1116, 1115,  645,  653,  652,  654,  664, 1114,
      677,  678,  656,  663,  665,  668, 1113,  690,  694,    0,
        0,    0, 1112, 1111,  681,  695,  698,  655,  699,  700,
      703,  710,  707,  708,  712,  713,  711,  206,  715,  722,
      717,  716,  723,  720,  724,  728,  719,  730,  721,  727,

      739, 1110,  742,  745, 1109,  749,  729, 1045,  746,  750,
        0,  775, 1020,  734,  736,  769,  771, 1017,  773,  777,
      781,  782,  783,  785,  784,  786,  787,  788,  789,  792,
      791,  793,  794,  801,  795,  796,  799, 1006,  991,  802,
      813,  803,  980,  804,  812,  805,  821,  807,  818,  825,
      829,    0,    0,  979,  837,  978,  814,  819,  849,  815,
      851,  852,  856,  857,  859,  860,  505,  861,  862,  977,
      976,  975,  973,  972,  970,  968,  967,  863,  867,  864,
      965,  868,  964,  962,  865,  869,  870,  871,  872,  873,
        0,    0,  876,  961,  877,  874,  875,  878,  959,  958,

      882,  885,  957,  956,  888,  879,  883,  949,  948,  947,
      881,  889,  945,  944,  890,  895,    0,    0,  940,  732,
      731,  569,  898,  899,  906,  917,  919,  558,  922,  924,
      925,  926,  928,  492,  927,  929,  930,  354,  267,  262,
      257,  933,  191,  124,   69,  935,  938,  939,  942,   64,
     1167,  994,  999, 1005, 1010, 1014, 1020, 1025, 1030, 1031,
     1033, 1040, 1044, 1047, 1050, 1055, 1057, 1064, 1068, 1071,
     1073, 1077, 1080, 1084, 1088, 1091, 1093, 1097, 1101, 1105,
     1107, 1111, 1114
    } ;

static const flex_int16_t yy_def[484] =
    {   0,
      451,    1,  451,  451,  451,  451,  451,  452,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  453,  451,  451,
      451,  454,  455,  451,  451,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  451,  451,  451,  451,  451,  451,  452,  451,  451,
      452,  452,  452,  451,  451,  456,  457,  456,   17,  458,
      459,  460,  453,  454,  451,  461,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,

      455,  455,  455,  451,  451,  462,  452,  463,  464,  465,
      452,  452,  466,  457,  451,  451,  451,  460,  467,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  468,  462,  451,  452,  469,  452,  470,  452,
      451,  451,  471,  467,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,

      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  468,  451,  452,  472,  168,  473,  474,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  475,
      476,  477,  474,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,

      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      478,  452,  479,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  480,  481,  479,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      482,  483,  455,  455,  455,  455,  455,  455,  455,  455,

      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  476,  483,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
        0,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  451
    } ;

static const flex_int16_t yy_nxt[1242] =
    {   0,
        4,    5,    6,    7,    8,    4,    9,   10,   11,   12,
       13,   14,   15,   16,   17,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   19,   20,   21,   22,   23,   23,
       23,   23,   23,   24,    4,   25,   23,   26,   27,   28,
       29,   30,   31,   23,   23,   32,   23,   23,   23,   33,
       23,   34,   35,   36,   37,   38,   39,   40,   23,   41,
       23,   23,   42,   43,    4,    4,    4,   44,    4,   44,
        4,    4,    4,   44,   45,   49,   66,  116,   66,  116,
       66,   66,   66,   66,   66,   54,   46,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   66,   66,   58,

       66,   66,   66,   79,   66,   50,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   61,   70,   78,   80,
       71,   81,   66,   73,   68,   82,  158,   83,   61,   88,
       74,   66,   72,   69,   77,   84,   66,   75,   66,   76,
       66,   51,   52,   53,   58,   87,   59,   59,   59,   59,
       59,   59,   59,   59,   60,   60,   66,  104,  113,  101,
       85,   61,   66,   49,   62,   86,  113,   89,   66,  105,
      113,   90,   49,   61,  451,   91,   66,   66,  113,  103,
       66,   94,   92,   95,   66,   96,   93,  102,   97,   66,
       49,   62,   66,   50,   66,   98,  138,   99,   58,   58,

      239,  451,   50,   66,  100,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   61,   61,  121,   66,  120,
       50,  130,   66,  125,  139,   66,  129,   61,   61,   51,
       52,   53,   48,   48,  111,  111,  111,  111,   51,   52,
       53,   49,  107,  107,  107,  107,  107,  107,  107,  107,
      111,  111,  111,  111,  111,  111,   51,   52,   53,  108,
      109,  124,   48,  126,  332,   48,   48,   66,  104,   66,
       48,   50,   66,   66,   66,   66,   66,   66,   48,   66,
      105,   48,   66,   48,  110,   48,   58,  109,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,  122,   66,

      132,  111,  111,  111,  111,  112,   66,   51,   52,   53,
      123,  131,  134,   66,  142,  140,   66,  133,  136,   66,
      137,   66,   66,   66,  127,   66,   66,   66,  128,   66,
       66,  135,   66,   66,   66,   66,   66,   66,  171,   49,
      171,   66,  141,   66,  145,   66,  146,   66,  150,  143,
       49,   66,  149,   66,   66,  144,   66,   66,   66,  147,
      148,   66,  151,  153,  157,  156,   66,  154,  152,   50,
      177,   66,  161,  159,  160,   66,  155,   66,  162,   49,
       50,  182,  179,  178,  175,  176,  190,  192,  181,  166,
      166,  166,  166,  166,  166,  166,  166,  196,  251,  170,

      170,  170,  170,  170,  170,   51,   52,   53,  191,   50,
      170,   66,   66,  180,  193,   66,   51,   52,   53,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,   66,
      194,  195,   66,   66,  198,   51,   52,   53,   66,   66,
       66,  183,   66,  184,  185,  186,  187,  188,  189,   66,
       66,   66,   66,   66,   66,  207,   66,  208,   66,   66,
       66,   66,  209,   66,   66,   49,   66,  200,  197,  199,
       66,  203,   66,   66,   66,  201,   66,  204,   66,  220,
       66,  221,   66,  212,  240,  202,  222,  206,  205,   66,

      211,   66,  217,  218,   66,   50,  210,  216,  213,   66,
       66,  214,  215,   66,  231,  219,   49,   66,  233,  230,
       66,  232,  236,  237,  404,  241,  225,  225,  225,  225,
      225,  225,  225,  225,   66,  238,  252,  242,  247,   66,
      250,   51,   52,   53,  245,   66,   50,  172,  172,  172,
      172,  172,  172,  172,  172,  172,  172,  172,  172,  172,
      172,  172,  172,  172,  172,  172,  172,   66,   66,  246,
       66,  262,   66,  234,  243,   66,  235,   66,   66,   66,
      254,   66,   51,   52,   53,   49,   66,   66,   66,   66,
       66,   66,  244,   66,   66,  227,  227,  227,  227,  227,

      227,  227,  227,  227,  227,  253,  248,  249,  257,  227,
      227,  258,  255,   66,   66,   50,  256,  259,  227,  227,
      227,  227,  227,  227,   66,  260,  264,   66,   66,   66,
       49,  274,  261,  269,   66,  266,  268,   66,  276,   66,
       66,   66,  263,  265,   66,   66,   66,   66,   66,   66,
       66,   51,   52,   53,   66,   66,  267,   66,   66,   66,
       50,   66,   66,  275,   66,   66,   66,   66,   66,  279,
      282,  283,  278,  281,  294,   66,   66,   66,  277,  285,
       66,  284,  280,  286,  295,  288,  290,  289,  297,   66,
       66,  291,  299,   66,  287,  292,   51,   52,   53,  293,

      298,  296,   66,  300,  302,  305,   66,   66,  306,  301,
       66,   66,   66,  303,  304,   66,  317,  308,  307,   66,
       66,  314,   66,   66,   66,   66,  309,   66,   66,   66,
      310,   66,   66,   66,   66,   66,   66,  319,  316,   66,
       66,   66,   66,   66,   66,  315,   66,  318,   66,  321,
      322,   66,  320,  336,   66,  323,  327,   66,   66,  324,
      338,   66,   66,  328,  329,  331,  325,  341,  330,  326,
      333,  334,  335,  340,  337,  342,  343,  339,  344,   49,
      345,   66,  355,   66,  346,   66,  349,  347,  350,   66,
      348,  356,  351,   66,   66,   66,   66,   66,   66,   66,

       66,   66,  367,   66,   66,   66,   66,   66,   66,   50,
      357,   66,  358,   66,   66,   66,   66,   66,  360,   66,
      361,  363,  364,  359,   66,   66,   66,   66,  371,  373,
       66,   66,  362,   66,  374,  368,  365,   66,  366,  369,
      376,   66,  385,  379,  370,   51,   52,   53,  372,   66,
      375,  377,  384,  380,  381,  378,  383,  387,  386,  388,
      382,   66,  389,   66,   66,  397,  390,  394,   66,   66,
      395,   66,   66,   66,   66,   66,   66,   66,  393,   66,
       66,   66,   66,   66,   66,   66,   66,   66,   66,   66,
       66,   66,  396,   66,   66,   66,  398,   66,  403,  402,

       66,   66,   66,  406,  399,  400,  408,   66,  407,  410,
       66,   66,  405,  411,  409,  421,  401,  412,   66,  420,
      415,  416,  427,  425,  414,  413,  419,  424,  426,   66,
      422,   66,  428,  423,   66,  429,   66,   66,   66,   66,
       66,   66,   66,  430,  431,   66,  445,   66,  434,  432,
       66,   66,   66,  433,   66,  437,   66,   66,  436,   66,
       66,   66,  435,  438,  442,  439,  440,  441,   66,   66,
       66,   66,  447,   66,   66,  446,   66,   66,  444,   66,
       66,  443,   66,  450,   66,   66,  448,   66,   66,   66,
       66,  353,   66,  449,   48,   48,   48,   48,   48,   48,

       48,   63,   63,   66,   63,   64,   64,   64,   64,   64,
       64,   64,   67,   67,   67,   67,   67,   56,   66,   56,
      114,  114,  114,  114,  114,  114,  114,   60,   60,   66,
       60,  117,  353,  117,  118,  118,  118,  119,  119,  119,
      164,  164,  164,  164,  164,  164,  164,  167,  167,  167,
      168,  168,  168,  169,  169,  169,  172,   66,  172,  174,
      174,  174,  174,  174,  223,  223,  223,  223,  223,  223,
      223,  226,  226,  226,  228,  228,  228,  229,  229,  229,
      270,  270,  270,  271,  271,  271,  273,  273,  273,  273,
      273,  311,  311,  311,  312,  312,  312,  313,  313,  313,

      352,  352,  352,  354,  354,  354,  354,  354,  391,  391,
      391,  392,  392,  392,  417,  417,  417,  418,  418,  418,
      418,   66,   66,   66,  272,   66,   66,   66,   66,   66,
       66,   66,  272,  224,   66,   66,   66,   66,   66,   66,
       66,   66,   66,   66,  173,  165,  224,   66,   66,   66,
       66,   66,   66,  173,  115,  165,  163,   66,   65,  115,
      106,   66,   65,   57,   47,  451,    3,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,

      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      451
    } ;

static const flex_int16_t yy_chk[1242] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    2,    8,  450,   61,   31,   61,
       30,  445,   99,   32,   27,   14,    2,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   26,   28,   18,

       36,   29,   33,   31,   35,    8,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   18,   27,   30,   31,
       27,   32,   34,   28,   26,   32,   99,   33,   18,   36,
       28,   39,   27,   26,   29,   33,  444,   28,   37,   28,
       41,    8,    8,    8,   17,   35,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   38,   45,   56,   39,
       34,   17,   40,   48,   17,   34,   58,   37,   82,   45,
       56,   37,   51,   17,   59,   37,   68,   83,   58,   41,
       72,   38,   37,   38,   69,   38,   37,   40,   38,   75,
       52,   17,  183,   48,   76,   38,   82,   38,   60,   63,

      183,   59,   51,  443,   38,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   60,   63,   69,  288,   68,
       52,   76,   71,   72,   83,   73,   75,   60,   63,   48,
       48,   48,   50,   50,   51,   51,   51,   51,   51,   51,
       51,   53,   50,   50,   50,   50,   50,   50,   50,   50,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   50,
       50,   71,   50,   73,  288,   50,   50,   70,  104,  441,
       50,   53,   77,   78,  440,   81,   79,   84,   50,  439,
      104,   50,   86,   50,   50,   50,   55,   50,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   70,   74,

       78,   53,   53,   53,   53,   53,   80,   53,   53,   53,
       70,   77,   79,   85,   86,   84,   87,   78,   81,   88,
       81,   90,   89,   91,   74,   92,   93,   95,   74,   96,
       94,   80,   97,  100,  101,   98,  102,  103,  113,  111,
      113,  129,   85,  123,   88,  134,   88,  132,   91,   87,
      112,  120,   90,  125,  121,   87,  124,  195,  138,   88,
       89,  128,   92,   94,   98,   97,  438,   95,   93,  111,
      123,  133,  102,  100,  101,  127,   96,  135,  103,  107,
      112,  129,  125,  124,  120,  121,  132,  134,  128,  107,
      107,  107,  107,  107,  107,  107,  107,  138,  195,  111,

      111,  111,  111,  111,  111,  111,  111,  111,  133,  107,
      112,  136,  137,  127,  135,  142,  112,  112,  112,  116,
      116,  116,  116,  116,  116,  116,  116,  116,  116,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  141,
      136,  137,  143,  144,  142,  107,  107,  107,  130,  145,
      146,  130,  147,  130,  130,  130,  130,  130,  130,  148,
      149,  150,  151,  152,  153,  151,  154,  151,  155,  157,
      156,  161,  151,  158,  159,  170,  176,  144,  141,  143,
      175,  147,  177,  178,  180,  145,  162,  148,  181,  162,
      184,  162,  196,  154,  184,  146,  162,  150,  149,  182,

      153,  185,  158,  159,  434,  170,  152,  157,  154,  194,
      190,  155,  156,  186,  176,  161,  166,  367,  178,  175,
      188,  177,  180,  181,  367,  185,  166,  166,  166,  166,
      166,  166,  166,  166,  179,  182,  196,  186,  190,  198,
      194,  170,  170,  170,  188,  189,  166,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  172,  172,  172,
      172,  172,  172,  172,  172,  172,  172,  208,  187,  189,
      428,  208,  202,  179,  187,  197,  179,  192,  193,  199,
      198,  422,  166,  166,  166,  168,  203,  200,  205,  206,
      212,  216,  187,  230,  232,  168,  168,  168,  168,  168,

      168,  168,  168,  168,  168,  197,  192,  193,  202,  168,
      168,  203,  199,  210,  213,  168,  200,  205,  168,  168,
      168,  168,  168,  168,  207,  206,  212,  219,  220,  221,
      225,  230,  207,  221,  231,  216,  220,  234,  232,  235,
      236,  237,  210,  213,  238,  247,  239,  240,  241,  245,
      242,  168,  168,  168,  244,  250,  219,  255,  246,  251,
      225,  243,  252,  231,  257,  256,  258,  278,  263,  236,
      239,  240,  235,  238,  247,  264,  259,  265,  234,  242,
      266,  241,  237,  242,  250,  243,  245,  244,  252,  261,
      262,  246,  256,  275,  242,  246,  225,  225,  225,  246,

      255,  251,  268,  257,  259,  263,  269,  276,  264,  258,
      277,  279,  280,  261,  262,  281,  278,  266,  265,  283,
      284,  275,  282,  287,  285,  286,  268,  289,  292,  291,
      269,  297,  294,  299,  290,  293,  295,  280,  277,  300,
      296,  307,  298,  421,  420,  276,  314,  279,  315,  282,
      282,  301,  281,  292,  303,  282,  283,  304,  309,  282,
      294,  306,  310,  284,  285,  287,  282,  297,  286,  282,
      289,  290,  291,  296,  293,  298,  299,  295,  300,  312,
      301,  316,  314,  317,  303,  319,  307,  304,  309,  320,
      306,  315,  310,  321,  322,  323,  325,  324,  326,  327,

      328,  329,  326,  331,  330,  332,  333,  335,  336,  312,
      316,  337,  317,  334,  340,  342,  344,  346,  320,  348,
      321,  323,  324,  319,  345,  341,  357,  360,  329,  331,
      349,  358,  322,  347,  332,  326,  324,  350,  325,  327,
      334,  351,  346,  337,  328,  312,  312,  312,  330,  355,
      333,  335,  345,  340,  341,  336,  344,  348,  347,  349,
      342,  359,  350,  361,  362,  360,  351,  357,  363,  364,
      358,  365,  366,  368,  369,  378,  380,  385,  355,  379,
      382,  386,  387,  388,  389,  390,  396,  397,  393,  395,
      398,  406,  359,  411,  401,  407,  361,  402,  366,  365,

      405,  412,  415,  369,  362,  363,  379,  416,  378,  382,
      423,  424,  368,  385,  380,  396,  364,  386,  425,  395,
      389,  390,  406,  402,  388,  387,  393,  401,  405,  426,
      397,  427,  407,  398,  429,  411,  430,  431,  432,  435,
      433,  436,  437,  412,  415,  442,  437,  446,  424,  416,
      447,  448,  419,  423,  449,  427,  414,  413,  426,  410,
      409,  408,  425,  429,  433,  430,  431,  432,  404,  403,
      400,  399,  446,  394,  384,  442,  383,  381,  436,  377,
      376,  435,  375,  449,  374,  373,  447,  372,  371,  370,
      356,  354,  343,  448,  452,  452,  452,  452,  452,  452,

      452,  453,  453,  339,  453,  454,  454,  454,  454,  454,
      454,  454,  455,  455,  455,  455,  455,  456,  338,  456,
      457,  457,  457,  457,  457,  457,  457,  458,  458,  318,
      458,  459,  313,  459,  460,  460,  460,  461,  461,  461,
      462,  462,  462,  462,  462,  462,  462,  463,  463,  463,
      464,  464,  464,  465,  465,  465,  466,  308,  466,  467,
      467,  467,  467,  467,  468,  468,  468,  468,  468,  468,
      468,  469,  469,  469,  470,  470,  470,  471,  471,  471,
      472,  472,  472,  473,  473,  473,  474,  474,  474,  474,
      474,  475,  475,  475,  476,  476,  476,  477,  477,  477,

      478,  478,  478,  479,  479,  479,  479,  479,  480,  480,
      480,  481,  481,  481,  482,  482,  482,  483,  483,  483,
      483,  305,  302,  274,  273,  267,  260,  254,  253,  249,
      248,  233,  229,  223,  222,  218,  217,  215,  214,  211,
      209,  204,  201,  191,  174,  164,  163,  160,  140,  139,
      131,  126,  122,  119,  114,  106,  105,   67,   64,   57,
       46,   23,   22,   16,    7,    3,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,

      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      451
    } ;

/* Table of booleans, true if rule could match eol. */
static const flex_int32_t yy_rule_can_match_eol[115] =
    {   0,
1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "fparser.l"
#line 13 "fparser.l"
#define YY_DECL int yyFlexLexer::yylex(YYSTYPE* yylval, YYLTYPE* yylloc, FrameIOParserDb* db)

#include "stdafx.h"
#include "fparser.h"
#include "fparser.tab.h"
#include <FlexLexer.h>
#include "FrameIOParserDb.h"


int yycolumn = 1;
int utf8len = 0;

#define YY_USER_ACTION utf8len = get_utf8_length(yytext, yyleng); yylloc->first_line = yylloc->last_line = yylineno; \
	yylloc->first_column = yycolumn; yylloc->last_column = yycolumn + utf8len - 1; \
	yycolumn += utf8len;
#line 873 "fparser.flex.cpp"
#line 874 "fparser.flex.cpp"

#define INITIAL 0

/*windows compatibility case*/
#include <io.h>
#define isatty _isatty
#define fileno _fileno
    
#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (int)(result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin.rdbuf(std::cin.rdbuf());

		if ( ! yyout )
			yyout.rdbuf(std::cout.rdbuf());

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 29 "fparser.l"



#line 1010 "fparser.flex.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 452 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1167 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 32 "fparser.l"
{ yycolumn = 1; yylval->symbol = db->SaveSymbol(yytext, yylloc->first_line-1, yylloc->first_column, yylloc->last_column-1);  return T_NOTE; }
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 33 "fparser.l"
{ yycolumn = 1; }
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 34 "fparser.l"
{ yycolumn = 1; yylval->symbol = db->SaveSymbol(yytext, yylloc->first_line-1, yylloc->first_column, yylloc->last_column-1);  return T_AT_USER; }
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 37 "fparser.l"
{ yylval->symbol = db->SaveSymbol(yytext, yylloc->first_line, yylloc->first_column, yylloc->last_column); return VALUE_STRING; }
	YY_BREAK
case 5:
#line 40 "fparser.l"
case 6:
#line 41 "fparser.l"
case 7:
#line 42 "fparser.l"
case 8:
#line 43 "fparser.l"
case 9:
#line 44 "fparser.l"
case 10:
#line 45 "fparser.l"
case 11:
#line 46 "fparser.l"
case 12:
#line 47 "fparser.l"
case 13:
#line 48 "fparser.l"
case 14:
#line 49 "fparser.l"
case 15:
#line 50 "fparser.l"
case 16:
#line 51 "fparser.l"
case 17:
#line 52 "fparser.l"
case 18:
YY_RULE_SETUP
#line 52 "fparser.l"
{ return yytext[0]; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 55 "fparser.l"
{ return T_PROJECT; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 56 "fparser.l"
{ return T_SYSTEM; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 57 "fparser.l"
{ return T_FRAME; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 58 "fparser.l"
{ return T_CHANNEL; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 59 "fparser.l"
{ return T_ENUM; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 60 "fparser.l"
{ return T_ACTION; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 61 "fparser.l"
{ return T_THIS; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 63 "fparser.l"
{ return T_INTEGER; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 64 "fparser.l"
{ return T_REAL; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 65 "fparser.l"
{ return T_BLOCK; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 66 "fparser.l"
{ return T_TEXT; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 69 "fparser.l"
{ return T_SEND; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 70 "fparser.l"
{ return T_ON; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 71 "fparser.l"
{ return T_RECV; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 72 "fparser.l"
{ return T_RECVLOOP; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 74 "fparser.l"
{ return T_COM; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 75 "fparser.l"
{ return T_CAN; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 76 "fparser.l"
{ return T_TCPSERVER; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 77 "fparser.l"
{ return T_TCPCLIENT; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 78 "fparser.l"
{ return T_UDP; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 79 "fparser.l"
{ return T_DIO; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 81 "fparser.l"
{ return T_SIGNED; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 82 "fparser.l"
{ return T_BITCOUNT; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 83 "fparser.l"
{ return T_VALUE; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 84 "fparser.l"
{ return T_REPEATED; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 85 "fparser.l"
{ return T_BYTEORDER; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 86 "fparser.l"
{ return T_ENCODED; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 87 "fparser.l"
{ return T_ISDOUBLE; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 88 "fparser.l"
{ return T_TAIL; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 89 "fparser.l"
{ return T_ALIGNEDLEN; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 90 "fparser.l"
{ return T_TYPE; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 91 "fparser.l"
{ return T_BYTESIZE; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 92 "fparser.l"
{ return T_TOENUM; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 93 "fparser.l"
{ return T_MAX; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 94 "fparser.l"
{ return T_MIN; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 95 "fparser.l"
{ return T_CHECK; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 96 "fparser.l"
{ return T_CHECKRANGE;}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 98 "fparser.l"
{ return T_ONEOF; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 99 "fparser.l"
{ return T_DEFAULT; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 100 "fparser.l"
{ return T_BYTESIZEOF; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 102 "fparser.l"
{ return T_TRUE; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 103 "fparser.l"
{ return T_FALSE; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 104 "fparser.l"
{ return T_SMALL; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 105 "fparser.l"
{ return T_BIG; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 106 "fparser.l"
{ return T_PRIMITIVE; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 107 "fparser.l"
{ return T_INVERSION; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 108 "fparser.l"
{ return T_COMPLEMENT; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 110 "fparser.l"
{ return T_SUM8; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 111 "fparser.l"
{ return T_XOR8; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 112 "fparser.l"
{ return T_SUM16; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 113 "fparser.l"
{ return T_SUM16_FALSE; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 114 "fparser.l"
{ return T_XOR16; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 115 "fparser.l"
{ return T_XOR16_FALSE; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 116 "fparser.l"
{ return T_SUM32; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 117 "fparser.l"
{ return T_SUM32_FALSE; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 118 "fparser.l"
{ return T_XOR32; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 119 "fparser.l"
{ return T_XOR32_FALSE; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 120 "fparser.l"
{ return T_CRC4_ITU; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 121 "fparser.l"
{ return T_CRC5_EPC; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 122 "fparser.l"
{ return T_CRC5_ITU; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 123 "fparser.l"
{ return T_CRC5_USB; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 124 "fparser.l"
{ return T_CRC6_ITU; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 125 "fparser.l"
{ return T_CRC7_MMC; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 126 "fparser.l"
{ return T_CRC8; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 127 "fparser.l"
{ return T_CRC8_ITU; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 128 "fparser.l"
{ return T_CRC8_ROHC; }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 129 "fparser.l"
{ return T_CRC8_MAXIM; }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 130 "fparser.l"
{ return T_CRC16_IBM; }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 131 "fparser.l"
{ return T_CRC16_MAXIM; }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 132 "fparser.l"
{ return T_CRC16_USB; }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 133 "fparser.l"
{ return T_CRC16_MODBUS; }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 134 "fparser.l"
{ return T_CRC16_CCITT; }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 135 "fparser.l"
{ return T_CRC16_CCITT_FALSE; }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 136 "fparser.l"
{ return T_CRC16_X25; }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 137 "fparser.l"
{ return T_CRC16_XMODEM; }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 138 "fparser.l"
{ return T_CRC16_DNP; }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 139 "fparser.l"
{ return T_CRC32; }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 140 "fparser.l"
{ return T_CRC32_MPEG_2; }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 141 "fparser.l"
{ return T_CRC64; }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 142 "fparser.l"
{ return T_CRC64_WE; }
	YY_BREAK
case 99:
#line 146 "fparser.l"
case 100:
#line 147 "fparser.l"
case 101:
YY_RULE_SETUP
#line 147 "fparser.l"
{ yylval->symbol = db->SaveSymbol(yytext, yylloc->first_line, yylloc->first_column, yylloc->last_column); return VALUE_INT; }
	YY_BREAK
case 102:
#line 150 "fparser.l"
case 103:
YY_RULE_SETUP
#line 150 "fparser.l"
{ yylval->symbol = db->SaveSymbol(yytext, yylloc->first_line, yylloc->first_column, yylloc->last_column); return VALUE_REAL; }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 152 "fparser.l"
{ yylval->symbol = db->SaveSymbol(yytext, yylloc->first_line, yylloc->first_column, yylloc->last_column); return T_UNION_ID; }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 153 "fparser.l"
{ yylval->symbol = db->SaveSymbol(yytext, yylloc->first_line, yylloc->first_column, yylloc->last_column); return T_UNION_ID; }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 154 "fparser.l"
{ yylval->symbol = db->SaveSymbol(yytext, yylloc->first_line, yylloc->first_column, yylloc->last_column); return T_UNION_ID; }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 155 "fparser.l"
{ yylval->symbol = db->SaveSymbol(yytext, yylloc->first_line, yylloc->first_column, yylloc->last_column); return T_UNION_ID; }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 156 "fparser.l"
{ yylval->symbol = db->SaveSymbol(yytext, yylloc->first_line, yylloc->first_column, yylloc->last_column); return T_ID; }
	YY_BREAK
case 109:
/* rule 109 can match eol */
YY_RULE_SETUP
#line 159 "fparser.l"
{ yycolumn=1; }
	YY_BREAK
case 110:
/* rule 110 can match eol */
YY_RULE_SETUP
#line 160 "fparser.l"
{ yycolumn=1; }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 161 "fparser.l"
{ ; }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 163 "fparser.l"
{ yycolumn=1; }
	YY_BREAK
case YY_STATE_EOF(INITIAL):
#line 164 "fparser.l"
{ return 0; }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 165 "fparser.l"
{ yylval->symbol = db->SaveSymbol(yytext, yylloc->first_line, yylloc->first_column, yylloc->last_column);  db->SaveError(ERROR_CODE_SYMBOL, yylval->symbol, yylval->symbol);  }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 166 "fparser.l"
ECHO;
	YY_BREAK
#line 1610 "fparser.flex.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin.rdbuf();
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 * This constructor simply maintains backward compatibility.
 * DEPRECATED
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout ):
	yyin(arg_yyin ? arg_yyin->rdbuf() : std::cin.rdbuf()),
	yyout(arg_yyout ? arg_yyout->rdbuf() : std::cout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream& arg_yyin, std::ostream& arg_yyout ):
	yyin(arg_yyin.rdbuf()),
	yyout(arg_yyout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::ctor_common()
{
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = NULL;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree( yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyfree( yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream& new_in, std::ostream& new_out )
{
	// was if( new_in )
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );

	// was if( new_out )
	yyout.rdbuf(new_out.rdbuf());
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if( ! new_in ) {
		new_in = &yyin;
	}

	if ( ! new_out ) {
		new_out = &yyout;
	}

	switch_streams(*new_in, *new_out);
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin.eof() || yyin.fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin.get( buf[0] );

	if ( yyin.eof() )
		return 0;

	if ( yyin.bad() )
		return -1;

	return 1;

#else
	(void) yyin.read( buf, max_size );

	if ( yyin.bad() )
		return -1;
	else
		return yyin.gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout.write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 452 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 452 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 451);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT
    void yyFlexLexer::yyunput( int c, char* yy_bp)
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
#endif

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');
	if ( YY_CURRENT_BUFFER_LVALUE->yy_at_bol )
		
    yylineno++;
;

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream& input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Delegate to the new version that takes an istream reference.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
void yyFlexLexer::yyrestart( std::istream* input_file )
{
	if( ! input_file ) {
		input_file = &yyin;
	}
	yyrestart( *input_file );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin.rdbuf(YY_CURRENT_BUFFER_LVALUE->yy_input_file);
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream& file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Delegate creation of buffers to the new version that takes an istream reference.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
	YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	return yy_create_buffer( *file, size );
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream& file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file.rdbuf();
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int _new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_size_t) (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc( new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc(
					(void *) (yy_start_stack), new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(_new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( const char* msg )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 166 "fparser.l"


