#line 1 "fparser.flex.cpp"

#line 3 "fparser.flex.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer yyFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream>
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex.
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::streambuf* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 120
#define YY_END_OF_BUFFER 121
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[477] =
    {   0,
        0,    0,  121,  119,  117,  116,  119,  119,    9,   10,
        6,    4,   17,    5,  119,    7,  109,  110,   15,   16,
        8,  114,   13,   14,  114,  114,  114,  114,  114,  114,
      114,  114,  114,  114,  114,  114,  114,  114,  114,  114,
      114,   11,   12,  118,  117,    7,  115,    0,    3,    0,
        0,    0,    0,    0,    0,  112,    0,  112,  109,    0,
        0,    0,  110,  114,  114,  114,  114,  114,  114,  114,
      114,  114,  114,  114,  114,  114,   48,   49,  114,  114,
      114,  114,  114,  114,  114,  114,  114,   40,  114,  114,
      114,  114,  114,  114,  114,  114,  114,  114,  114,  114,

      114,  114,  114,  114,  114,  114,  114,  114,  114,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        2,    0,  113,  111,  114,  114,  114,   72,  114,  114,
      114,  114,   44,  114,  114,   43,  114,  114,  114,  114,
      114,  114,  114,  114,   34,  114,  114,  114,   65,   66,
      114,  114,  114,  114,  114,  114,  114,  114,  114,  114,
      114,  114,  114,  114,  114,  114,  114,  114,  114,  114,
      114,   47,  114,  114,  114,    0,    0,    1,    0,    0,
        0,    0,    0,    0,  112,  114,  114,  114,  114,  114,
       28,   29,  114,  114,  114,  114,  114,  114,  114,  114,

      114,   92,  114,  114,  114,   22,  114,  114,  114,  114,
      114,  114,   36,  114,  114,  114,   25,   41,  114,  114,
       39,  114,  114,  114,  114,  114,   76,  114,   59,  114,
      114,   27,  114,   69,   61,   33,  114,  114,  114,  114,
      114,   77,    0,    1,    0,    0,    0,    0,  114,  114,
      114,  114,   26,  114,  114,  114,   67,  114,  114,  105,
      114,  114,  107,  114,  114,  114,  114,  114,  114,   70,
       37,   20,  114,  114,  114,   64,  114,  114,  114,  114,
       30,   32,  114,   71,   78,   82,  114,  114,  114,  114,
       35,  114,   54,   80,   84,    0,    0,   23,  114,  114,

      114,  114,  114,  114,  114,  114,  114,  114,  114,  114,
      114,  114,  114,  114,  114,  114,  114,  114,  114,   38,
      114,  114,  114,  114,  114,  114,  114,  114,   52,  114,
      114,   19,  114,  114,   63,   31,  114,  114,    0,    0,
      114,  114,  114,  114,  114,   21,  114,  114,  114,  114,
      114,  114,  114,  114,  114,  114,  114,  114,  114,  114,
      114,  114,  114,  114,  114,  114,   57,   24,  114,  114,
      114,   18,  114,  114,  114,  114,  114,  114,  114,  114,
        0,  114,   51,   53,  114,   62,  114,  114,  114,  114,
      114,  114,  114,  114,  114,  114,  114,   86,   87,   88,

       89,  108,   90,   91,   93,  114,  114,   50,  114,   58,
      114,   42,   55,  114,  114,  114,  114,  114,  114,    0,
      114,   56,  114,  114,  114,  104,   96,  114,  114,   98,
      102,  114,  114,  114,   94,   74,   73,  114,  114,   46,
       45,  114,  114,    0,   60,   68,   75,  114,  114,  114,
      114,  114,   95,  114,  114,  114,  114,  100,   97,  114,
      114,  114,   79,   83,   81,   85,  114,   99,  103,  106,
      114,  114,  114,  114,  101,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    5,    1,    1,    1,    1,    6,    7,
        8,    9,   10,   11,   12,   13,   14,   15,   16,   17,
       18,   19,   20,   21,   22,   23,   24,   25,   26,    1,
       27,    1,    6,    1,   28,   28,   28,   28,   29,   28,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   31,   30,   30,   32,   30,   30,
       33,   34,   35,    1,   36,    1,   37,   38,   39,   40,

       41,   42,   43,   44,   45,   46,   47,   48,   49,   50,
       51,   52,   30,   53,   54,   55,   56,   57,   58,   59,
       60,   61,   62,    1,   63,    1,    1,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   66,   66,   66,   67,   66,   66,   68,
       69,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,   70,   71,   71,
       71,   71,   72,    1,    1,    1,    1,    1,   73,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[74] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
        1,    2,    3,    1,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    1,    1,    1,    5,    6,    7,
        7,    7,    1,    1,    1,    7,    5,    5,    5,    5,
        6,    5,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1
    } ;

static const flex_int16_t yy_base[501] =
    {   0,
        0,   72,  787,  788,  788,  788,  783,   70,  788,  788,
      788,  788,  788,  772,   61,  770,  130,   74,  788,  788,
      788,    0,  788,  788,   49,   54,   56,   65,  733,   64,
       40,  731,   74,  731,  727,  738,  119,   84,   44,  741,
      726,  788,  788,  788,  106,  762,  788,  121,  788,  189,
      131,  244,  191,  249,  762,   89,  771,   93,   97,  145,
      121,    0,  199,    0,  718,  727,  715,   84,  719,  718,
      713,  717,   87,  717,  726,  707,    0,  707,  122,  714,
      710,  723,  112,  719,  708,  698,  706,  714,   87,  133,
      694,  703,  701,  708,  713,  700,  694,  702,  694,  686,

      703,  687,  690,  691,  689,  699,  694,  689,  683,  174,
      721,  731,  312,    0,    0,    0,  380,  213,  170,  730,
      788,  271,  281,    0,  687,  688,  690,    0,  690,  689,
      679,  685,    0,  675,  685,  671,  214,  677,  683,  669,
      670,  664,  680,  667,  674,  673,  662,  669,    0,    0,
      660,  661,  663,  660,  650,  665,  650,  664,  650,  652,
      653,  199,  645,  651,  127,  643,  647,  655,  654,  639,
      643,    0,  641,  635,  258,  687,  686,  788,  448,    0,
      516,    0,  182,  320,  332,  637,  637,  633,  634,  637,
        0,  187,  633,  635,  633,  659,  662,  607,  585,  154,

      582,  571,  561,  537,  544,    0,  542,  527,  540,  537,
      526,  522,    0,  535,  531,  534,    0,  526,  536,  531,
        0,  516,  529,  521,  547,  550,    0,  525,    0,  517,
      523,    0,  507,    0,    0,    0,  519,  508,  519,  538,
      535,    0,  548,  788,  340,    0,    0,    0,  499,  507,
      510,  490,    0,  490,  497,  500,  477,  488,  492,  491,
      481,  316,  489,  479,  474,  273,  481,  476,  475,    0,
        0,    0,  474,  460,  475,    0,  457,  472,  459,  454,
        0,    0,  468,    0,  471,  470,  456,  459,  450,  453,
        0,  446,    0,  464,  463,    0,    0,    0,  458,  442,

      446,  455,  433,  445,  455,  442,  319,  441,  434,  436,
      432,  432,  427,  429,  434,  426,  443,  428,  433,    0,
      437,  423,  430,  426,  428,  417,  420,  421,    0,  419,
      418,    0,  418,  401,    0,    0,  415,  414,    0,  355,
      407,  413,  388,  401,  400,    0,  390,  398,  399,  387,
      398,  192,  381,  202,  382,  377,  393,  375,  392,  388,
      372,  385,  367,  363,  377,  380,    0,    0,  368,  377,
      360,    0,  364,  375,  376,  372,  358,  366,  369,  368,
        0,  363,    0,    0,  350,    0,  359,  351,  355,  347,
      349,  338,  356,  357,  374,  342,  351,    0,    0,    0,

        0,    0,    0,    0,    0,  346,  351,    0,  338,    0,
      346,    0,    0,  338,  333,  325,  326,  329,  328,    0,
      323,    0,  330,  315,  314,    0,    0,  322,  328,    0,
        0,  325,  320,  313,    0,    0,    0,  271,  270,    0,
        0,  269,  267,    0,    0,    0,    0,  265,  270,  251,
      265,  246,    0,  239,  238,  234,  219,  214,    0,  170,
      165,  196,    0,    0,    0,    0,  142,    0,    0,    0,
      146,  129,   59,   54,    0,  788,  588,  593,  595,  598,
      602,  608,  613,  618,  619,  625,  629,  632,  635,  640,
      644,  648,  651,  654,  657,  660,  663,  666,  669,  672

    } ;

static const flex_int16_t yy_def[501] =
    {   0,
      476,    1,  476,  476,  476,  476,  476,  477,  476,  476,
      476,  476,  476,  478,  476,  476,  476,  479,  476,  476,
      476,  480,  476,  476,  480,  480,  480,  480,  480,  480,
      480,  480,  480,  480,  480,  480,  480,  480,  480,  480,
      480,  476,  476,  476,  476,  476,  476,  477,  476,  476,
      477,  477,  477,  476,  478,  481,  482,  481,   17,  483,
      484,  485,  479,  480,  480,  480,  480,  480,  480,  480,
      480,  480,  480,  480,  480,  480,  480,  480,  480,  480,
      480,  480,  480,  480,  480,  480,  480,  480,  480,  480,
      480,  480,  480,  480,  480,  480,  480,  480,  480,  480,

      480,  480,  480,  480,  480,  480,  480,  480,  480,  476,
      476,  486,  477,  487,  488,  489,  477,  477,  490,  482,
      476,  476,  476,  485,  480,  480,  480,  480,  480,  480,
      480,  480,  480,  480,  480,  480,  480,  480,  480,  480,
      480,  480,  480,  480,  480,  480,  480,  480,  480,  480,
      480,  480,  480,  480,  480,  480,  480,  480,  480,  480,
      480,  480,  480,  480,  480,  480,  480,  480,  480,  480,
      480,  480,  480,  480,  480,  491,  486,  476,  477,  492,
      477,  493,  477,  476,  476,  480,  480,  480,  480,  480,
      480,  480,  480,  480,  480,  480,  480,  480,  480,  480,

      480,  480,  480,  480,  480,  480,  480,  480,  480,  480,
      480,  480,  480,  480,  480,  480,  480,  480,  480,  480,
      480,  480,  480,  480,  480,  480,  480,  480,  480,  480,
      480,  480,  480,  480,  480,  480,  480,  480,  480,  480,
      480,  480,  491,  476,  477,  494,  181,  495,  480,  480,
      480,  480,  480,  480,  480,  480,  480,  480,  480,  480,
      480,  480,  480,  480,  480,  480,  480,  480,  480,  480,
      480,  480,  480,  480,  480,  480,  480,  480,  480,  480,
      480,  480,  480,  480,  480,  480,  480,  480,  480,  480,
      480,  480,  480,  480,  480,  496,  497,  480,  480,  480,

      480,  480,  480,  480,  480,  480,  480,  480,  480,  480,
      480,  480,  480,  480,  480,  480,  480,  480,  480,  480,
      480,  480,  480,  480,  480,  480,  480,  480,  480,  480,
      480,  480,  480,  480,  480,  480,  480,  480,  498,  477,
      480,  480,  480,  480,  480,  480,  480,  480,  480,  480,
      480,  480,  480,  480,  480,  480,  480,  480,  480,  480,
      480,  480,  480,  480,  480,  480,  480,  480,  480,  480,
      480,  480,  480,  480,  480,  480,  480,  480,  480,  480,
      499,  480,  480,  480,  480,  480,  480,  480,  480,  480,
      480,  480,  480,  480,  480,  480,  480,  480,  480,  480,

      480,  480,  480,  480,  480,  480,  480,  480,  480,  480,
      480,  480,  480,  480,  480,  480,  480,  480,  480,  500,
      480,  480,  480,  480,  480,  480,  480,  480,  480,  480,
      480,  480,  480,  480,  480,  480,  480,  480,  480,  480,
      480,  480,  480,  497,  480,  480,  480,  480,  480,  480,
      480,  480,  480,  480,  480,  480,  480,  480,  480,  480,
      480,  480,  480,  480,  480,  480,  480,  480,  480,  480,
      480,  480,  480,  480,  480,    0,  476,  476,  476,  476,
      476,  476,  476,  476,  476,  476,  476,  476,  476,  476,
      476,  476,  476,  476,  476,  476,  476,  476,  476,  476

    } ;

static const flex_int16_t yy_nxt[862] =
    {   0,
        4,    5,    6,    7,    8,    4,    9,   10,   11,   12,
       13,   14,   15,   16,   17,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   19,   20,   21,   22,   22,   22,
       22,   22,   23,    4,   24,   22,   25,   26,   27,   28,
       29,   30,   22,   22,   31,   22,   22,   32,   33,   22,
       34,   35,   36,   37,   38,   39,   40,   22,   41,   22,
       22,   42,   43,    4,    4,    4,   44,    4,   44,    4,
        4,    4,   44,   45,   49,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   46,   58,   65,  104,   83,
       67,  105,   72,   84,  475,  106,   66,  107,   68,   73,

       80,   69,   61,   50,   70,   76,   74,  110,   75,   77,
       86,   81,  474,   71,   61,   78,   82,  119,   87,  111,
       98,  119,   99,  134,  100,   49,  128,  135,  476,  119,
      122,  152,  122,  119,  101,   49,  102,  153,  129,   51,
       52,   53,   58,  103,   59,   59,   59,   59,   59,   59,
       59,   59,   60,   60,   50,  476,   91,   58,   61,   92,
      140,   62,   93,   94,   50,  230,  145,   95,  146,  154,
       61,  155,  263,   61,   96,  110,  473,  141,   97,  184,
      231,  184,  472,  471,  156,   61,   49,  111,   62,  264,
       51,   52,   53,   48,   48,   49,  117,  117,  117,  117,

       51,   52,   53,  113,  113,  113,  113,  113,  113,  113,
      113,   58,  470,  469,  225,   50,  226,   49,  395,  114,
      115,  227,   48,  468,   50,   48,   48,   61,  392,  196,
       48,  197,  198,  199,  200,  201,  202,  254,   48,   61,
      255,   48,  393,   48,  116,   48,   50,  115,   49,  467,
      396,   51,   52,   53,  117,  117,  117,  117,  118,  466,
       51,   52,   53,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,  240,  465,  241,  183,   50,  464,  463,
      242,  462,   51,   52,   53,  123,  123,  123,  123,  123,
      123,  123,  123,  123,  123,  123,  123,  123,  123,  123,

      123,  123,  123,  123,  123,  461,  460,  117,  117,  117,
      117,  117,  117,   51,   52,   53,   49,  316,  459,  458,
      457,  317,  456,  455,  454,  318,  179,  179,  179,  179,
      179,  179,  179,  179,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  185,   49,   50,  185,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  310,  349,  350,   49,
      311,  453,  452,  351,  451,  450,  449,  352,  448,  447,
      446,  312,  445,   50,  353,  443,  442,  354,  441,  440,
      439,   51,   52,   53,   49,  438,  437,  436,   50,  435,
      434,  433,  432,  431,  430,  429,  428,  427,  426,  425,

      424,  423,  422,  421,  419,  418,  417,  416,  415,   51,
       52,   53,  414,   50,  413,  412,  411,  410,  409,  408,
      407,  406,  405,  404,   51,   52,   53,  403,  402,  401,
      400,  399,  398,  397,  394,  391,  390,  389,  388,  387,
      386,  385,  384,  183,  183,  183,  183,  183,  183,   51,
       52,   53,   49,  383,  382,  380,  379,  378,  377,  376,
      375,  374,  245,  245,  245,  245,  245,  245,  245,  245,
      373,  372,  371,  370,  369,  368,  367,  366,  365,  364,
      363,   50,  362,  361,  360,  359,  358,  357,  356,  355,
      348,  347,  346,  345,  344,  343,  342,  341,  338,  337,

      336,  335,  334,  333,  332,  331,  330,  329,  328,  327,
      326,  325,  324,  323,  322,  321,  320,   51,   52,   53,
       49,  319,  315,  314,  313,  309,  308,  307,  306,  305,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
      304,  303,  302,  247,  247,  301,  300,  299,  298,   50,
      244,  295,  247,  247,  247,  247,  247,  247,  294,  293,
      292,  291,  290,  289,  288,  287,  286,  285,  284,  283,
      282,  281,  280,  279,  278,  277,  276,  275,  274,  273,
      272,  271,  270,  269,  268,   51,   52,   53,   48,   48,
       48,   48,   48,   48,   48,   55,   55,   63,   63,  267,

       63,   64,   64,   64,   64,   56,  266,   56,  120,  120,
      120,  120,  120,  120,  120,   60,   60,  265,   60,  123,
      262,  123,  124,  124,  124,  177,  177,  177,  177,  177,
      177,  177,  180,  180,  180,  181,  181,  181,  182,  182,
      182,  185,  261,  185,  243,  243,  243,  243,  243,  243,
      243,  246,  246,  246,  248,  248,  248,  296,  296,  296,
      297,  297,  297,  339,  339,  339,  340,  340,  340,  381,
      381,  381,  420,  420,  420,  444,  444,  444,  260,  259,
      258,  257,  256,  253,  252,  251,  250,  249,  178,  244,
      239,  238,  237,  236,  235,  234,  233,  232,  229,  228,

      224,  223,  222,  221,  220,  219,  218,  217,  216,  215,
      214,  213,  212,  211,  210,  209,  208,  207,  206,  205,
      204,  203,  195,  194,  193,  192,  191,  190,  189,  188,
      187,  186,  121,  178,  176,  175,  174,  173,  172,  171,
      170,  169,  168,  167,  166,  165,  164,  163,  162,  161,
      160,  159,  158,  157,  151,  150,  149,  148,  147,  144,
      143,  142,  139,  138,  137,  136,  133,  132,  131,  130,
      127,  126,  125,  121,   58,  112,  109,  108,   90,   89,
       88,   85,   79,   57,   54,   47,  476,    3,  476,  476,
      476,  476,  476,  476,  476,  476,  476,  476,  476,  476,

      476,  476,  476,  476,  476,  476,  476,  476,  476,  476,
      476,  476,  476,  476,  476,  476,  476,  476,  476,  476,
      476,  476,  476,  476,  476,  476,  476,  476,  476,  476,
      476,  476,  476,  476,  476,  476,  476,  476,  476,  476,
      476,  476,  476,  476,  476,  476,  476,  476,  476,  476,
      476,  476,  476,  476,  476,  476,  476,  476,  476,  476,
      476
    } ;

static const flex_int16_t yy_chk[862] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    2,    8,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,    2,   18,   25,   39,   31,
       26,   39,   27,   31,  474,   39,   25,   39,   26,   27,

       30,   26,   18,    8,   26,   28,   27,   45,   27,   28,
       33,   30,  473,   26,   18,   28,   30,   56,   33,   45,
       38,   58,   38,   73,   38,   48,   68,   73,   59,   56,
       61,   89,   61,   58,   38,   51,   38,   89,   68,    8,
        8,    8,   17,   38,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   48,   59,   37,   60,   17,   37,
       79,   17,   37,   37,   51,  165,   83,   37,   83,   90,
       17,   90,  200,   60,   37,  110,  472,   79,   37,  119,
      165,  119,  471,  467,   90,   60,  183,  110,   17,  200,
       48,   48,   48,   50,   50,   53,   51,   51,   51,   51,

       51,   51,   51,   50,   50,   50,   50,   50,   50,   50,
       50,   63,  462,  461,  162,  183,  162,  118,  354,   50,
       50,  162,   50,  460,   53,   50,   50,   63,  352,  137,
       50,  137,  137,  137,  137,  137,  137,  192,   50,   63,
      192,   50,  352,   50,   50,   50,  118,   50,   52,  458,
      354,  183,  183,  183,   53,   53,   53,   53,   53,  457,
       53,   53,   53,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,  175,  456,  175,  118,   52,  455,  454,
      175,  452,  118,  118,  118,  122,  122,  122,  122,  122,
      122,  122,  122,  122,  122,  123,  123,  123,  123,  123,

      123,  123,  123,  123,  123,  451,  450,   52,   52,   52,
       52,   52,   52,   52,   52,   52,  113,  266,  449,  448,
      443,  266,  442,  439,  438,  266,  113,  113,  113,  113,
      113,  113,  113,  113,  184,  184,  184,  184,  184,  184,
      184,  184,  184,  184,  245,  113,  185,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  262,  307,  307,  340,
      262,  434,  433,  307,  432,  429,  428,  307,  425,  424,
      423,  262,  421,  245,  307,  419,  418,  307,  417,  416,
      415,  113,  113,  113,  117,  414,  411,  409,  340,  407,
      406,  397,  396,  395,  394,  393,  392,  391,  390,  389,

      388,  387,  385,  382,  380,  379,  378,  377,  376,  245,
      245,  245,  375,  117,  374,  373,  371,  370,  369,  366,
      365,  364,  363,  362,  340,  340,  340,  361,  360,  359,
      358,  357,  356,  355,  353,  351,  350,  349,  348,  347,
      345,  344,  343,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  179,  342,  341,  338,  337,  334,  333,  331,
      330,  328,  179,  179,  179,  179,  179,  179,  179,  179,
      327,  326,  325,  324,  323,  322,  321,  319,  318,  317,
      316,  179,  315,  314,  313,  312,  311,  310,  309,  308,
      306,  305,  304,  303,  302,  301,  300,  299,  295,  294,

      292,  290,  289,  288,  287,  286,  285,  283,  280,  279,
      278,  277,  275,  274,  273,  269,  268,  179,  179,  179,
      181,  267,  265,  264,  263,  261,  260,  259,  258,  257,
      181,  181,  181,  181,  181,  181,  181,  181,  181,  181,
      256,  255,  254,  181,  181,  252,  251,  250,  249,  181,
      243,  241,  181,  181,  181,  181,  181,  181,  240,  239,
      238,  237,  233,  231,  230,  228,  226,  225,  224,  223,
      222,  220,  219,  218,  216,  215,  214,  212,  211,  210,
      209,  208,  207,  205,  204,  181,  181,  181,  477,  477,
      477,  477,  477,  477,  477,  478,  478,  479,  479,  203,

      479,  480,  480,  480,  480,  481,  202,  481,  482,  482,
      482,  482,  482,  482,  482,  483,  483,  201,  483,  484,
      199,  484,  485,  485,  485,  486,  486,  486,  486,  486,
      486,  486,  487,  487,  487,  488,  488,  488,  489,  489,
      489,  490,  198,  490,  491,  491,  491,  491,  491,  491,
      491,  492,  492,  492,  493,  493,  493,  494,  494,  494,
      495,  495,  495,  496,  496,  496,  497,  497,  497,  498,
      498,  498,  499,  499,  499,  500,  500,  500,  197,  196,
      195,  194,  193,  190,  189,  188,  187,  186,  177,  176,
      174,  173,  171,  170,  169,  168,  167,  166,  164,  163,

      161,  160,  159,  158,  157,  156,  155,  154,  153,  152,
      151,  148,  147,  146,  145,  144,  143,  142,  141,  140,
      139,  138,  136,  135,  134,  132,  131,  130,  129,  127,
      126,  125,  120,  112,  111,  109,  108,  107,  106,  105,
      104,  103,  102,  101,  100,   99,   98,   97,   96,   95,
       94,   93,   92,   91,   88,   87,   86,   85,   84,   82,
       81,   80,   78,   76,   75,   74,   72,   71,   70,   69,
       67,   66,   65,   57,   55,   46,   41,   40,   36,   35,
       34,   32,   29,   16,   14,    7,    3,  476,  476,  476,
      476,  476,  476,  476,  476,  476,  476,  476,  476,  476,

      476,  476,  476,  476,  476,  476,  476,  476,  476,  476,
      476,  476,  476,  476,  476,  476,  476,  476,  476,  476,
      476,  476,  476,  476,  476,  476,  476,  476,  476,  476,
      476,  476,  476,  476,  476,  476,  476,  476,  476,  476,
      476,  476,  476,  476,  476,  476,  476,  476,  476,  476,
      476,  476,  476,  476,  476,  476,  476,  476,  476,  476,
      476
    } ;

/* Table of booleans, true if rule could match eol. */
static const flex_int32_t yy_rule_can_match_eol[121] =
    {   0,
1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 
    0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "fparser.l"
#line 12 "fparser.l"
#define YY_DECL int yyFlexLexer::yylex(YYSTYPE* yylval, YYLTYPE* yylloc, FrameIOParserDb* db)

#include "stdafx.h"
#include "fparser.h"
#include "fparser.tab.h"
#include <FlexLexer.h>
#include "FrameIOParserDb.h"


int yycolumn = 1;
int utf8len = 0;

#define YY_USER_ACTION utf8len = get_utf8_length(yytext, yyleng); yylloc->first_line = yylloc->last_line = yylineno; \
	yylloc->first_column = yycolumn; yylloc->last_column = yycolumn + utf8len - 1; \
	yycolumn += utf8len;
#line 796 "fparser.flex.cpp"
#line 797 "fparser.flex.cpp"

#define INITIAL 0

/*windows compatibility case*/
#include <io.h>
#define isatty _isatty
#define fileno _fileno
    
#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (int)(result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin.rdbuf(std::cin.rdbuf());

		if ( ! yyout )
			yyout.rdbuf(std::cout.rdbuf());

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 28 "fparser.l"



#line 933 "fparser.flex.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 477 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 788 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 31 "fparser.l"
{ yycolumn = 1; yylval->symbol = db->SaveSymbol(yytext, yylloc->first_line-1, yylloc->first_column, yylloc->last_column-1);  return T_NOTE; }
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 32 "fparser.l"
{ yycolumn = 1; }
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 35 "fparser.l"
{ /*yylval.symbol = save_symbol(yytext, yylloc.first_line, yylloc.first_column, yylloc.last_column);*/ return VALUE_STRING; }
	YY_BREAK
case 4:
#line 38 "fparser.l"
case 5:
#line 39 "fparser.l"
case 6:
#line 40 "fparser.l"
case 7:
#line 41 "fparser.l"
case 8:
#line 42 "fparser.l"
case 9:
#line 43 "fparser.l"
case 10:
#line 44 "fparser.l"
case 11:
#line 45 "fparser.l"
case 12:
#line 46 "fparser.l"
case 13:
#line 47 "fparser.l"
case 14:
#line 48 "fparser.l"
case 15:
#line 49 "fparser.l"
case 16:
#line 50 "fparser.l"
case 17:
YY_RULE_SETUP
#line 50 "fparser.l"
{ return yytext[0]; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 53 "fparser.l"
{ return T_PROJECT; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 54 "fparser.l"
{ return T_SYSTEM; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 55 "fparser.l"
{ return T_FRAME; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 56 "fparser.l"
{ return T_CHANNEL; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 57 "fparser.l"
{ return T_ENUM; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 58 "fparser.l"
{ return T_ACTION; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 60 "fparser.l"
{ return T_INTEGER; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 61 "fparser.l"
{ return T_REAL; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 62 "fparser.l"
{ return T_BLOCK; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 63 "fparser.l"
{ return T_TEXT; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 65 "fparser.l"
{ return T_BOOL; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 66 "fparser.l"
{ return T_BYTE; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 67 "fparser.l"
{ return T_SBYTE; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 68 "fparser.l"
{ return T_USHORT; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 69 "fparser.l"
{ return T_SHORT; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 70 "fparser.l"
{ return T_UINT; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 71 "fparser.l"
{ return T_INT; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 72 "fparser.l"
{ return T_ULONG; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 73 "fparser.l"
{ return T_LONG; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 74 "fparser.l"
{ return T_FLOAT; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 75 "fparser.l"
{ return T_DOUBLE; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 77 "fparser.l"
{ return T_SEND; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 78 "fparser.l"
{ return T_ON; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 79 "fparser.l"
{ return T_RECV; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 80 "fparser.l"
{ return T_RECVLOOP; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 82 "fparser.l"
{ return T_COM; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 83 "fparser.l"
{ return T_CAN; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 84 "fparser.l"
{ return T_TCPSERVER; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 85 "fparser.l"
{ return T_TCPCLIENT; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 86 "fparser.l"
{ return T_UDP; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 87 "fparser.l"
{ return T_DI; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 88 "fparser.l"
{ return T_DO; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 90 "fparser.l"
{ return T_DEVICEID; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 91 "fparser.l"
{ return T_BAUDRATE; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 93 "fparser.l"
{ return T_SIGNED; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 94 "fparser.l"
{ return T_BITCOUNT; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 95 "fparser.l"
{ return T_VALUE; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 96 "fparser.l"
{ return T_REPEATED; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 97 "fparser.l"
{ return T_BYTEORDER; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 98 "fparser.l"
{ return T_ENCODED; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 99 "fparser.l"
{ return T_ISDOUBLE; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 100 "fparser.l"
{ return T_TAIL; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 101 "fparser.l"
{ return T_ALIGEDLEN; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 102 "fparser.l"
{ return T_TYPE; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 103 "fparser.l"
{ return T_BYTESIZE; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 104 "fparser.l"
{ return T_TOENUM; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 105 "fparser.l"
{ return T_ONEOF; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 106 "fparser.l"
{ return T_MAX; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 107 "fparser.l"
{ return T_MIN; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 108 "fparser.l"
{ return T_CHECK; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 109 "fparser.l"
{ return T_CHECKRANGE;}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 111 "fparser.l"
{ return T_TRUE; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 112 "fparser.l"
{ return T_FALSE; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 113 "fparser.l"
{ return T_SMALL; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 114 "fparser.l"
{ return T_BIG; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 115 "fparser.l"
{ return T_PRIMITIVE; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 116 "fparser.l"
{ return T_INVRSION; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 117 "fparser.l"
{ return T_COMPLEMENT; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 119 "fparser.l"
{ return T_SUM8; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 120 "fparser.l"
{ return T_XOR8; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 121 "fparser.l"
{ return T_SUM16; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 122 "fparser.l"
{ return T_SUM16_FALSE; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 123 "fparser.l"
{ return T_XOR16; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 124 "fparser.l"
{ return T_XOR16_FALSE; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 125 "fparser.l"
{ return T_SUM32; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 126 "fparser.l"
{ return T_SUM32_FALSE; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 127 "fparser.l"
{ return T_XOR32; }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 128 "fparser.l"
{ return T_XOR32_FALSE; }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 129 "fparser.l"
{ return T_CRC4_ITU; }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 130 "fparser.l"
{ return T_CRC5_EPC; }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 131 "fparser.l"
{ return T_CRC5_ITU; }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 132 "fparser.l"
{ return T_CRC5_USB; }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 133 "fparser.l"
{ return T_CRC6_ITU; }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 134 "fparser.l"
{ return T_CRC7_MMC; }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 135 "fparser.l"
{ return T_CRC8; }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 136 "fparser.l"
{ return T_CRC8_ITU; }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 137 "fparser.l"
{ return T_CRC8_ROHC; }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 138 "fparser.l"
{ return T_CRC8_MAXIM; }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 139 "fparser.l"
{ return T_CRC16_IBM; }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 140 "fparser.l"
{ return T_CRC16_MAXIM; }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 141 "fparser.l"
{ return T_CRC16_USB; }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 142 "fparser.l"
{ return T_CRC16_MODBUS; }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 143 "fparser.l"
{ return T_CRC16_CCITT; }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 144 "fparser.l"
{ return T_CRC16_CCITT_FALSE; }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 145 "fparser.l"
{ return T_CRC16_X25; }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 146 "fparser.l"
{ return T_CRC16_XMODEM; }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 147 "fparser.l"
{ return T_CRC16_DNP; }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 148 "fparser.l"
{ return T_CRC32; }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 149 "fparser.l"
{ return T_CRC32_MPEG_2; }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 150 "fparser.l"
{ return T_CRC64; }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 151 "fparser.l"
{ return T_CRC64_WE; }
	YY_BREAK
case 109:
#line 155 "fparser.l"
case 110:
#line 156 "fparser.l"
case 111:
YY_RULE_SETUP
#line 156 "fparser.l"
{ yylval->symbol = db->SaveSymbol(yytext, yylloc->first_line, yylloc->first_column, yylloc->last_column); return VALUE_INT; }
	YY_BREAK
case 112:
#line 159 "fparser.l"
case 113:
YY_RULE_SETUP
#line 159 "fparser.l"
{ yylval->symbol = db->SaveSymbol(yytext, yylloc->first_line, yylloc->first_column, yylloc->last_column); return VALUE_REAL; }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 161 "fparser.l"
{ yylval->symbol = db->SaveSymbol(yytext, yylloc->first_line, yylloc->first_column, yylloc->last_column); return T_ID; }
	YY_BREAK
case 115:
/* rule 115 can match eol */
YY_RULE_SETUP
#line 163 "fparser.l"
{ yycolumn=1; }
	YY_BREAK
case 116:
/* rule 116 can match eol */
YY_RULE_SETUP
#line 164 "fparser.l"
{ yycolumn=1; }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 165 "fparser.l"
{ ; }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 167 "fparser.l"
{ yycolumn=1; }
	YY_BREAK
case YY_STATE_EOF(INITIAL):
#line 168 "fparser.l"
{ return 0; }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 169 "fparser.l"
{ yylval->symbol = db->SaveSymbol(yytext, yylloc->first_line, yylloc->first_column, yylloc->last_column);  db->SaveError(ERROR_CODE_SYMBOL, yylval->symbol, yylval->symbol);  }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 170 "fparser.l"
ECHO;
	YY_BREAK
#line 1562 "fparser.flex.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin.rdbuf();
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 * This constructor simply maintains backward compatibility.
 * DEPRECATED
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout ):
	yyin(arg_yyin ? arg_yyin->rdbuf() : std::cin.rdbuf()),
	yyout(arg_yyout ? arg_yyout->rdbuf() : std::cout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream& arg_yyin, std::ostream& arg_yyout ):
	yyin(arg_yyin.rdbuf()),
	yyout(arg_yyout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::ctor_common()
{
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = NULL;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree( yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyfree( yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream& new_in, std::ostream& new_out )
{
	// was if( new_in )
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );

	// was if( new_out )
	yyout.rdbuf(new_out.rdbuf());
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if( ! new_in ) {
		new_in = &yyin;
	}

	if ( ! new_out ) {
		new_out = &yyout;
	}

	switch_streams(*new_in, *new_out);
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin.eof() || yyin.fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin.get( buf[0] );

	if ( yyin.eof() )
		return 0;

	if ( yyin.bad() )
		return -1;

	return 1;

#else
	(void) yyin.read( buf, max_size );

	if ( yyin.bad() )
		return -1;
	else
		return yyin.gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout.write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 477 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 477 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 476);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT
    void yyFlexLexer::yyunput( int c, char* yy_bp)
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
#endif

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');
	if ( YY_CURRENT_BUFFER_LVALUE->yy_at_bol )
		
    yylineno++;
;

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream& input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Delegate to the new version that takes an istream reference.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
void yyFlexLexer::yyrestart( std::istream* input_file )
{
	if( ! input_file ) {
		input_file = &yyin;
	}
	yyrestart( *input_file );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin.rdbuf(YY_CURRENT_BUFFER_LVALUE->yy_input_file);
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream& file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Delegate creation of buffers to the new version that takes an istream reference.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
	YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	return yy_create_buffer( *file, size );
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream& file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file.rdbuf();
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int _new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_size_t) (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc( new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc(
					(void *) (yy_start_stack), new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(_new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( const char* msg )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 170 "fparser.l"


